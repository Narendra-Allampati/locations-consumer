#KAFKA_BOOTSTRAP_SERVERS: "localhost:9092"
KAFKA_BOOTSTRAP_SERVERS: "pkc-lq8gm.westeurope.azure.confluent.cloud:9092"
KAFKA_TOPIC: MSK.geography.gda.topic.internal.any.v2
KAFKA_USERNAME: DONOUESM3BKJO7ZW
KAFKA_PASSWORD: ouDnEHcLMwtzYP0EsuXKSGanIz5znUc61Qry7xjyyTVphM0gOvabrPtT3817x1AR
KAFKA_CONSUMER_GROUP: MSK.referenceData.referenceDataReader.consumerGroup.v1

KAFKA_SCHEMA_REGISTRY_URL: "https://psrc-4kk0p.westeurope.azure.confluent.cloud/"
KAFKA_SCHEMA_REGISTRY_API_KEY:
KAFKA_SCHEMA_REGISTRY_PASSWORD:

ELASTICSEARCH_HOST: localhost:9200
ELASTICSEARCH_API_KEY:

PROFILE: local

OTEL_COLLECTOR_ADDRESS: "http://localhost:4317"

POSTGRES_HOST: https://localhost:5432
POSTGRES_DB: reference-data-locations
POSTGRES_USER: postgres
POSTGRES_PWD: postgres
# Scheme identifies whether SSL is disabled (r2dbc) or Enabled (r2dbcs)
POSTGRES_SCHEME: r2dbc

kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
  login-module: org.apache.kafka.common.security.plain.PlainLoginModule
  security-protocol: SASL_SSL
  sasl-mechanism: PLAIN
  client-id: subscription-response-consumer
  username: ${KAFKA_USERNAME}
  password: ${KAFKA_PASSWORD}
  schema-registry:
    url: ${KAFKA_SCHEMA_REGISTRY_URL}
    username: ${KAFKA_SCHEMA_REGISTRY_API_KEY}
    password: ${KAFKA_SCHEMA_REGISTRY_PASSWORD}
  consumer:
    topic: ${KAFKA_TOPIC}
    consumer-group: ${KAFKA_CONSUMER_GROUP}
    offset-auto-reset: earliest
    concurrency: 1
    max-poll-records: 5
    max-poll-timeout: 5000
    max-fetch-size-bytes: 2097164
    retry:
      max-attempts: 3
      initial-interval-secs: 2

spring:
  application:
    name: locations-consumer
  data:
    r2dbc:
      repositories:
        enabled: true
  r2dbc:
    #  r2dbc:a-driver:pipes://localhost:3306/my_database?locale=en_US
    #  \___/ \______/ \___/   \____________/\__________/\___________/
    #  |       |      |           |           |           |
    #  scheme  driver  protocol  authority    path        query
    url: ${POSTGRES_SCHEME}:postgresql:${POSTGRES_HOST}/${POSTGRES_DB}?locale=en_GB
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PWD}
  elasticsearch:
    host: ${ELASTICSEARCH_HOST}
    api-key: ${ELASTICSEARCH_API_KEY}
  profiles:
    active: ${PROFILE}
  sleuth:
    otel:
      exporter:
        otlp:
          endpoint: ${OTEL_COLLECTOR_ADDRESS}

management:
  health:
    kafka:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: "readinessState,diskSpace,ping,kafka"
          show-details: always

  endpoints:
    web:
      exposure:
        include: health, info, prometheus