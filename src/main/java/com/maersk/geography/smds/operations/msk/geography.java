/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.geography.smds.operations.msk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Geography Entity Information Which includes subcity,city,state,country,continent and their respective Alternate name and Code Information */
@org.apache.avro.specific.AvroGenerated
public class geography extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7569401206779449578L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"geography\",\"namespace\":\"com.maersk.geography.smds.operations.msk\",\"doc\":\"Geography Entity Information Which includes subcity,city,state,country,continent and their respective Alternate name and Code Information\",\"fields\":[{\"name\":\"geoId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N\"},{\"name\":\"geoType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The geoType of Geography object. Example: For Copenhagen city GeoType is City\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of Geography object. Example: Copenhagen\"},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The status of Geography object. Example: Active or Inactive\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"The Valid fromdate of Geography object. Example: 1900-01-01\"},{\"name\":\"validTo\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"The Valid todate of Geography object. Example: 9999-12-31\"},{\"name\":\"longitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The longitude of Geography object. Example: 73.859301\",\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The latitude of Geography object. Example: 18.531206\",\"default\":null},{\"name\":\"timeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The time zone of Geography object .Example: EST\",\"default\":null},{\"name\":\"daylightSavingTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The day light saving time of Geography object. Example: EDT\",\"default\":null},{\"name\":\"utcOffsetMinutes\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The utc offset minutes  of Geography object. Example: -360\",\"default\":null},{\"name\":\"daylightSavingStart\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"doc\":\"The recent day light saving start date of Geography object. Example: 03-10-21\",\"default\":null},{\"name\":\"daylightSavingEnd\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"doc\":\"The recent day light saving end date of Geography object. Example: 03-04-22\",\"default\":null},{\"name\":\"daylightSavingShiftMinutes\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The day light saving shift minutes of Geography object. Example: 60\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The description of Geography object. Example: Olson update\",\"default\":null},{\"name\":\"workaroundReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The work around reason of  Geography object. Example: US Military routing\",\"default\":null},{\"name\":\"restricted\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO\",\"default\":null},{\"name\":\"postalCodeMandatory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory\",\"default\":null},{\"name\":\"stateProvinceMandatory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The state province  mandatory check of country only.\",\"default\":null},{\"name\":\"dialingCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The dialing code  of country. Example: 251\",\"default\":null},{\"name\":\"dialingCodeDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The dialing code description of country. Example: +251\",\"default\":null},{\"name\":\"portFlag\",\"type\":\"boolean\",\"doc\":\"The port flag of geography object. Example: true or false\",\"default\":false},{\"name\":\"olsonTimezone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The olson timezone  of geography object. Example: Europe/London\",\"default\":null},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The business defined area type of  geography object. Example: FINANCIAL,POOL\",\"default\":null},{\"name\":\"hsudName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The hamburgsud name of  geography object. Example: Pune\",\"default\":null},{\"name\":\"isMaerskCity\",\"type\":\"boolean\",\"doc\":\"Maersk City check. Example: true or false\",\"default\":false},{\"name\":\"alternateNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateName\",\"doc\":\"AlternateNames Details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate name of  geography object. Example: ICD PUNE\"},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The alternate name description of  geography object. Example: ICD PUNE\",\"default\":null},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The status of  geography object. Example: ACTIVE OR INACTIVE\"}]}}],\"default\":null},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateCode\",\"doc\":\"AlternateCodes Details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code type of  geography object. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code value of  geography object. Example: INPNQ00\"}]}}},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"country\",\"doc\":\"Country Details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of country. Example: India\"},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"countryAlternateCode\",\"doc\":\"Country AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code type of  country. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code value of  country. Example: INPNQ00\"}]}}}]}],\"default\":null},{\"name\":\"parent\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"parent\",\"doc\":\"Display Parent Information.For city Copenghagen  the parent is country Denmark\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The parent name of geography object. Example: MAHARASHTRA\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The parent type of geography object. Example: State/Prov\"},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The business defined area type of geography object. Example: FINANCIAL,POOL\",\"default\":null},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"parentAlternateCode\",\"doc\":\"Parent AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code type of  parent object. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code value of  parent object. Example: INPNQ00\"}]}}}]}],\"default\":null},{\"name\":\"subCityParents\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParent\",\"doc\":\"Display Sub City Parent Information.For city Pune the sub cities are like viman nagar and so on\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The sub city name of city. Example: viman nagar\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The sub city parent type of city. Example: city\"},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The business defined area type of geography object. Example: FINANCIAL,POOL\",\"default\":null},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParentAlternateCode\",\"doc\":\"SubCityParent AlternateCode ","details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate code type of subcity. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The alternate value type of subcity. Example: INPNQ00\"}]}}}]}}],\"default\":null},{\"name\":\"bdas\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bda\",\"doc\":\"Display business defined area information. Example : North India,West & Central Asia and so on\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The business defined area  of geography object. Example: North India\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The type of geography object. Example: Business Defined Area\"},{\"name\":\"bdaType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The business defined area type of geography object. Example: FINANCIAL,POOL\"},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaAlternateCode\",\"doc\":\"BDA AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The  alternate code type of business defined area. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The  alternate code value of business defined area. Example: INPNQ00\"}]}}}]}}],\"default\":null},{\"name\":\"bdaLocations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocation\",\"doc\":\"Display business defined area location and status information. Example : Liberty city\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The business defined area location  of geography object. Example: Pune\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The business defined area location type of geography object. Example: city or site\"},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The business defined area location status  of geography object. Example: Active or Inactive\"},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocationAlternateCode\",\"doc\":\"BDALocation AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The  alternate code type of business defined area location. Example: RKTS,RKST,GEOID\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The  alternate code value of business defined area location. Example: INPNQ00\"}]}}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<geography> ENCODER =
      new BinaryMessageEncoder<geography>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<geography> DECODER =
      new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<geography> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<geography> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<geography> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this geography to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a geography from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a geography instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static geography fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N */
  private java.lang.String geoId;
  /** The geoType of Geography object. Example: For Copenhagen city GeoType is City */
  private java.lang.String geoType;
  /** The name of Geography object. Example: Copenhagen */
  private java.lang.String name;
  /** The status of Geography object. Example: Active or Inactive */
  private java.lang.String status;
  /** The Valid fromdate of Geography object. Example: 1900-01-01 */
  private java.time.LocalDate validFrom;
  /** The Valid todate of Geography object. Example: 9999-12-31 */
  private java.time.LocalDate validTo;
  /** The longitude of Geography object. Example: 73.859301 */
  private java.lang.String longitude;
  /** The latitude of Geography object. Example: 18.531206 */
  private java.lang.String latitude;
  /** The time zone of Geography object .Example: EST */
  private java.lang.String timeZone;
  /** The day light saving time of Geography object. Example: EDT */
  private java.lang.String daylightSavingTime;
  /** The utc offset minutes  of Geography object. Example: -360 */
  private java.lang.String utcOffsetMinutes;
  /** The recent day light saving start date of Geography object. Example: 03-10-21 */
  private java.time.LocalDate daylightSavingStart;
  /** The recent day light saving end date of Geography object. Example: 03-04-22 */
  private java.time.LocalDate daylightSavingEnd;
  /** The day light saving shift minutes of Geography object. Example: 60 */
  private java.lang.String daylightSavingShiftMinutes;
  /** The description of Geography object. Example: Olson update */
  private java.lang.String description;
  /** The work around reason of  Geography object. Example: US Military routing */
  private java.lang.String workaroundReason;
  /** The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO */
  private java.lang.String restricted;
  /** The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory */
  private java.lang.String postalCodeMandatory;
  /** The state province  mandatory check of country only. */
  private java.lang.String stateProvinceMandatory;
  /** The dialing code  of country. Example: 251 */
  private java.lang.String dialingCode;
  /** The dialing code description of country. Example: +251 */
  private java.lang.String dialingCodeDescription;
  /** The port flag of geography object. Example: true or false */
  private boolean portFlag;
  /** The olson timezone  of geography object. Example: Europe/London */
  private java.lang.String olsonTimezone;
  /** The business defined area type of  geography object. Example: FINANCIAL,POOL */
  private java.lang.String bdaType;
  /** The hamburgsud name of  geography object. Example: Pune */
  private java.lang.String hsudName;
  /** Maersk City check. Example: true or false */
  private boolean isMaerskCity;
  private java.util.List<com.maersk.geography.smds.operations.msk.alternateName> alternateNames;
  private java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> alternateCodes;
  private com.maersk.geography.smds.operations.msk.country country;
  private com.maersk.geography.smds.operations.msk.parent parent;
  private java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParents;
  private java.util.List<com.maersk.geography.smds.operations.msk.bda> bdas;
  private java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public geography() {}

  /**
   * All-args constructor.
   * @param geoId The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
   * @param geoType The geoType of Geography object. Example: For Copenhagen city GeoType is City
   * @param name The name of Geography object. Example: Copenhagen
   * @param status The status of Geography object. Example: Active or Inactive
   * @param validFrom The Valid fromdate of Geography object. Example: 1900-01-01
   * @param validTo The Valid todate of Geography object. Example: 9999-12-31
   * @param longitude The longitude of Geography object. Example: 73.859301
   * @param latitude The latitude of Geography object. Example: 18.531206
   * @param timeZone The time zone of Geography object .Example: EST
   * @param daylightSavingTime The day light saving time of Geography object. Example: EDT
   * @param utcOffsetMinutes The utc offset minutes  of Geography object. Example: -360
   * @param daylightSavingStart The recent day light saving start date of Geography object. Example: 03-10-21
   * @param daylightSavingEnd The recent day light saving end date of Geography object. Example: 03-04-22
   * @param daylightSavingShiftMinutes The day light saving shift minutes of Geography object. Example: 60
   * @param description The description of Geography object. Example: Olson update
   * @param workaroundReason The work around reason of  Geography object. Example: US Military routing
   * @param restricted The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
   * @param postalCodeMandatory The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
   * @param stateProvinceMandatory The state province  mandatory check of country only.
   * @param dialingCode The dialing code  of country. Example: 251
   * @param dialingCodeDescription The dialing code description of country. Example: +251
   * @param portFlag The port flag of geography object. Example: true or false
   * @param olsonTimezone The olson timezone  of geography object. Example: Europe/London
   * @param bdaType The business defined area type of  geography object. Example: FINANCIAL,POOL
   * @param hsudName The hamburgsud name of  geography object. Example: Pune
   * @param isMaerskCity Maersk City check. Example: true or false
   * @param alternateNames The new value for alternateNames
   * @param alternateCodes The new value for alternateCodes
   * @param country The new value for country
   * @param parent The new value for parent
   * @param subCityParents The new value for subCityParents
   * @param bdas The new value for bdas
   * @param bdaLocations The new value for bdaLocations
   */
  public geography(java.lang.String geoId, java.lang.String geoType, java.lang.String name, java.lang.String status, java.time.LocalDate validFrom, java.time.LocalDate validTo, java.lang.String longitude, java.lang.String latitude, java.lang.String timeZone, java.lang.String daylightSavingTime, java.lang.String utcOffsetMinutes, java.time.LocalDate daylightSavingStart, java.time.LocalDate daylightSavingEnd, java.lang.String daylightSavingShiftMinutes, java.lang.String description, java.lang.String workaroundReason, java.lang.String restricted, java.lang.String postalCodeMandatory, java.lang.String stateProvinceMandatory, java.lang.String dialingCode, java.lang.String dialingCodeDescription, java.lang.Boolean portFlag, java.lang.String olsonTimezone, java.lang.String bdaType, java.lang.String hsudName, java.lang.Boolean isMaerskCity, java.util.List<com.maersk.geography.smds.operations.msk.alternateName> alternateNames, java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> alternateCodes, com.maersk.geography.smds.operations.msk.country country, com.maersk.geography.smds.operations.msk.parent parent, java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParents, java.util.List<com.maersk.geography.smds.operations.msk.bda> bdas, java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations) {
    this.geoId = geoId;
    this.geoType = geoType;
    this.name = name;
    this.status = status;
    this.validFrom = validFrom;
    this.validTo = validTo;
    this.longitude = longitude;
    this.latitude = latitude;
    this.timeZone = timeZone;
    this.daylightSavingTime = daylightSavingTime;
    this.utcOffsetMinutes = utcOffsetMinutes;
    this.daylightSavingStart = daylightSavingStart;
    this.daylightSavingEnd = daylightSavingEnd;
    this.daylightSavingShiftMinutes = daylightSavingShiftMinutes;
    this.description = description;
    this.workaroundReason = workaroundReason;
    this.restricted = restricted;
    this.postalCodeMandatory = postalCodeMandatory;
    this.stateProvinceMandatory = stateProvinceMandatory;
    this.dialingCode = dialingCode;
    this.dialingCodeDescription = dialingCodeDescription;
    this.portFlag = portFlag;
    this.olsonTimezone = olsonTimezone;
    this.bdaType = bdaType;
    this.hsudName = hsudName;
    this.isMaerskCity = isMaerskCity;
    this.alternateNames = alternateNames;
    this.alternateCodes = alternateCodes;
    this.country = country;
    this.parent = parent;
    this.subCityParents = subCityParents;
    this.bdas = bdas;
    this.bdaLocations = bdaLocations;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return geoId;
    case 1: return geoType;
    case 2: return name;
    case 3: return status;
    case 4: return validFrom;
    case 5: return validTo;
    case 6: return longitude;
    case 7: return latitude;
    case 8: return timeZone;
    case 9: return daylightSavingTime;
    case 10: return utcOffsetMinutes;
    case 11: return daylightSavingStart;
    case 12: return daylightSavingEnd;
    case 13: return daylightSavingShiftMinutes;
    case 14: return description;
    case 15: return workaroundReason;
    case 16: return restricted;
    case 17: return postalCodeMandatory;
    case 18: return stateProvinceMandatory;
    case 19: return dialingCode;
    case 20: return dialingCodeDescription;
    case 21: return portFlag;
    case 22: return olsonTimezone;
    case 23: return bdaType;
    case 24: return hsudName;
    case 25: return isMaerskCity;
    case 26: return alternateNames;
    case 27: return alternateCodes;
    case 28: return country;
    case 29: return parent;
    case 30: return subCityParents;
    case 31: return bdas;
    case 32: return bdaLocations;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: geoId = value$ != null ? value$.toString() : null; break;
    case 1: geoType = value$ != null ? value$.toString() : null; break;
    case 2: name = value$ != null ? value$.toString() : null; break;
    case 3: status = value$ != null ? value$.toString() : null; break;
    case 4: validFrom = (java.time.LocalDate)value$; break;
    case 5: validTo = (java.time.LocalDate)value$; break;
    case 6: longitude = value$ != null ? value$.toString() : null; break;
    case 7: latitude = value$ != null ? value$.toString() : null; break;
    case 8: timeZone = value$ != null ? value$.toString() : null; break;
    case 9: daylightSavingTime = value$ != null ? value$.toString() : null; break;
    case 10: utcOffsetMinutes = value$ != null ? value$.toString() : null; break;
    case 11: daylightSavingStart = (java.time.LocalDate)value$; break;
    case 12: daylightSavingEnd = (java.time.LocalDate)value$; break;
    case 13: daylightSavingShiftMinutes = value$ != null ? value$.toString() : null; break;
    case 14: description = value$ != null ? value$.toString() : null; break;
    case 15: workaroundReason = value$ != null ? value$.toString() : null; break;
    case 16: restricted = value$ != null ? value$.toString() : null; break;
    case 17: postalCodeMandatory = value$ != null ? value$.toString() : null; break;
    case 18: stateProvinceMandatory = value$ != null ? value$.toString() : null; break;
    case 19: dialingCode = value$ != null ? value$.toString() : null; break;
    case 20: dialingCodeDescription = value$ != null ? value$.toString() : null; break;
    case 21: portFlag = (java.lang.Boolean)value$; break;
    case 22: olsonTimezone = value$ != null ? value$.toString() : null; break;
    case 23: bdaType = value$ != null ? value$.toString() : null; break;
    case 24: hsudName = value$ != null ? value$.toString() : null; break;
    case 25: isMaerskCity = (java.lang.Boolean)value$; break;
    case 26: alternateNames = (java.util.List<com.maersk.geography.smds.operations.msk.alternateName>)value$; break;
    case 27: alternateCodes = (java.util.List<com.maersk.geography.smds.operations.msk.alternateCode>)value$; break;
    case 28: country = (com.maersk.geography.smds.operations.msk.country)value$; break;
    case 29: parent = (com.maersk.geography.smds.operations.msk.parent)value$; break;
    case 30: subCityParents = (java.util.List<com.maersk.geography.smds.operations.msk.subCityParent>)value$; break;
    case 31: bdas = (java.util.List<com.maersk.geography.smds.operations.msk.bda>)value$; break;
    case 32: bdaLocations = (java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'geoId' field.
   * @return The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
   */
  public java.lang.String getGeoId() {
    return geoId;
  }


  /**
   * Sets the value of the 'geoId' field.
   * The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
   * @param value the value to set.
   */
  public void setGeoId(java.lang.String value) {
    this.geoId = value;
  }

  /**
   * Gets the value of the 'geoType' field.
   * @return The geoType of Geography object. Example: For Copenhagen city GeoType is City
   */
  public java.lang.String getGeoType() {
    return geoType;
  }


  /**
   * Sets the value of the 'geoType' field.
   * The geoType of Geography object. Example: For Copenhagen city GeoType is City
   * @param value the value to set.
   */
  public void setGeoType(java.lang.String value) {
    this.geoType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The name of Geography object. Example: Copenhagen
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * The name of Geography object. Example: Copenhagen
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The status of Geography object. Example: Active or Inactive
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * The status of Geography object. Example: Active or Inactive
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return The Valid fromdate of Geography object. Example: 1900-01-01
   */
  public java.time.LocalDate getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * The Valid fromdate of Geography object. Example: 1900-01-01
   * @param value the value to set.
   */
  public void setValidFrom(java.time.LocalDate value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return The Valid todate of Geography object. Example: 9999-12-31
   */
  public java.time.LocalDate getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * The Valid todate of Geography object. Example: 9999-12-31
   * @param value the value to set.
   */
  public void setValidTo(java.time.LocalDate value) {
    this.validTo = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The longitude of Geography object. Example: 73.859301
   */
  public java.lang.String getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * The longitude of Geography object. Example: 73.859301
   * @param value the value to set.
   */
  public void setLongitude(java.lang.String value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The latitude of Geography object. Example: 18.531206
   */
  public java.lang.String getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * The latitude of Geography object. Example: 18.531206
   * @param value the value to set.
   */
  public void setLatitude(java.lang.String value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'timeZone' field.
   * @return The time zone of Geography object .Example: EST
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }


  /**
   * Sets the value of the 'timeZone' field.
   * The time zone of Geography object .Example: EST
   * @param value the value to set.
   */
  public void setTimeZone(java.lang.String value) {
    this.timeZone = value;
  }

  /**
   * Gets the value of the 'daylightSavingTime' field.
   * @return The day light saving time of Geography object. Example: EDT
   */
  public java.lang.String getDaylightSavingTime() {
    return daylightSavingTime;
  }


  /**
   * Sets the value of the 'daylightSavingTime' field.
   * The day light saving time of Geography object. Example: EDT
   * @param value the value to set.
   */
  public void setDaylightSavingTime(java.lang.String value) {
    this.daylightSavingTime = value;
  }

  /**
   * Gets the value of the 'utcOffsetMinutes' field.
   * @return The utc offset minutes  of Geography object. Example: -360
   */
  public java.lang.String getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }


  /**
   * Sets the value of the 'utcOffsetMinutes' field.
   * The utc offset minutes  of Geography object. Example: -360
   * @param value the value to set.
   */
  public void setUtcOffsetMinutes(java.lang.String value) {
    this.utcOffsetMinutes = value;
  }

  /**
   * Gets the value of the 'daylightSavingStart' field.
   * @return The recent day light saving start date of Geography object. Example: 03-10-21
   */
  public java.time.LocalDate getDaylightSavingStart() {
    return daylightSavingStart;
  }


  /**
   * Sets the value of the 'daylightSavingStart' field.
   * The recent day light saving start date of Geography object. Example: 03-10-21
   * @param value the value to set.
   */
  public void setDaylightSavingStart(java.time.LocalDate value) {
    this.daylightSavingStart = value;
  }

  /**
   * Gets the value of the 'daylightSavingEnd' field.
   * @return The recent day light saving end date of Geography object. Example: 03-04-22
   */
  public java.time.LocalDate getDaylightSavingEnd() {
    return daylightSavingEnd;
  }


  /**
   * Sets the value of the 'daylightSavingEnd' field.
   * The recent day light saving end date of Geography object. Example: 03-04-22
   * @param value the value to set.
   */
  public void setDaylightSavingEnd(java.time.LocalDate value) {
    this.daylightSavingEnd = value;
  }

  /**
   * Gets the value of the 'daylightSavingShiftMinutes' field.
   * @return The day light saving shift minutes of Geography object. Example: 60
   */
  public java.lang.String getDaylightSavingShiftMinutes() {
    return daylightSavingShiftMinutes;
  }


  /**
   * Sets the value of the 'daylightSavingShiftMinutes' field.
   * The day light saving shift minutes of Geography object. Example: 60
   * @param value the value to set.
   */
  public void setDaylightSavingShiftMinutes(java.lang.String value) {
    this.daylightSavingShiftMinutes = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The description of Geography object. Example: Olson update
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * The description of Geography object. Example: Olson update
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'workaroundReason' field.
   * @return The work around reason of  Geography object. Example: US Military routing
   */
  public java.lang.String getWorkaroundReason() {
    return workaroundReason;
  }


  /**
   * Sets the value of the 'workaroundReason' field.
   * The work around reason of  Geography object. Example: US Military routing
   * @param value the value to set.
   */
  public void setWorkaroundReason(java.lang.String value) {
    this.workaroundReason = value;
  }

  /**
   * Gets the value of the 'restricted' field.
   * @return The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
   */
  public java.lang.String getRestricted() {
    return restricted;
  }


  /**
   * Sets the value of the 'restricted' field.
   * The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
   * @param value the value to set.
   */
  public void setRestricted(java.lang.String value) {
    this.restricted = value;
  }

  /**
   * Gets the value of the 'postalCodeMandatory' field.
   * @return The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
   */
  public java.lang.String getPostalCodeMandatory() {
    return postalCodeMandatory;
  }


  /**
   * Sets the value of the 'postalCodeMandatory' field.
   * The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
   * @param value the value to set.
   */
  public void setPostalCodeMandatory(java.lang.String value) {
    this.postalCodeMandatory = value;
  }

  /**
   * Gets the value of the 'stateProvinceMandatory' field.
   * @return The state province  mandatory check of country only.
   */
  public java.lang.String getStateProvinceMandatory() {
    return stateProvinceMandatory;
  }


  /**
   * Sets the value of the 'stateProvinceMandatory' field.
   * The state province  mandatory check of country only.
   * @param value the value to set.
   */
  public void setStateProvinceMandatory(java.lang.String value) {
    this.stateProvinceMandatory = value;
  }

  /**
   * Gets the value of the 'dialingCode' field.
   * @return The dialing code  of country. Example: 251
   */
  public java.lang.String getDialingCode() {
    return dialingCode;
  }


  /**
   * Sets the value of the 'dialingCode' field.
   * The dialing code  of country. Example: 251
   * @param value the value to set.
   */
  public void setDialingCode(java.lang.String value) {
    this.dialingCode = value;
  }

  /**
   * Gets the value of the 'dialingCodeDescription' field.
   * @return The dialing code description of country. Example: +251
   */
  public java.lang.String getDialingCodeDescription() {
    return dialingCodeDescription;
  }


  /**
   * Sets the value of the 'dialingCodeDescription' field.
   * The dialing code description of country. Example: +251
   * @param value the value to set.
   */
  public void setDialingCodeDescription(java.lang.String value) {
    this.dialingCodeDescription = value;
  }

  /**
   * Gets the value of the 'portFlag' field.
   * @return The port flag of geography object. Example: true or false
   */
  public boolean getPortFlag() {
    return portFlag;
  }


  /**
   * Sets the value of the 'portFlag' field.
   * The port flag of geography object. Example: true or false
   * @param value the value to set.
   */
  public void setPortFlag(boolean value) {
    this.portFlag = value;
  }

  /**
   * Gets the value of the 'olsonTimezone' field.
   * @return The olson timezone  of geography object. Example: Europe/London
   */
  public java.lang.String getOlsonTimezone() {
    return olsonTimezone;
  }


  /**
   * Sets the value of the 'olsonTimezone' field.
   * The olson timezone  of geography object. Example: Europe/London
   * @param value the value to set.
   */
  public void setOlsonTimezone(java.lang.String value) {
    this.olsonTimezone = value;
  }

  /**
   * Gets the value of the 'bdaType' field.
   * @return The business defined area type of  geography object. Example: FINANCIAL,POOL
   */
  public java.lang.String getBdaType() {
    return bdaType;
  }


  /**
   * Sets the value of the 'bdaType' field.
   * The business defined area type of  geography object. Example: FINANCIAL,POOL
   * @param value the value to set.
   */
  public void setBdaType(java.lang.String value) {
    this.bdaType = value;
  }

  /**
   * Gets the value of the 'hsudName' field.
   * @return The hamburgsud name of  geography object. Example: Pune
   */
  public java.lang.String getHsudName() {
    return hsudName;
  }


  /**
   * Sets the value of the 'hsudName' field.
   * The hamburgsud name of  geography object. Example: Pune
   * @param value the value to set.
   */
  public void setHsudName(java.lang.String value) {
    this.hsudName = value;
  }

  /**
   * Gets the value of the 'isMaerskCity' field.
   * @return Maersk City check. Example: true or false
   */
  public boolean getIsMaerskCity() {
    return isMaerskCity;
  }


  /**
   * Sets the value of the 'isMaerskCity' field.
   * Maersk City check. Example: true or false
   * @param value the value to set.
   */
  public void setIsMaerskCity(boolean value) {
    this.isMaerskCity = value;
  }

  /**
   * Gets the value of the 'alternateNames' field.
   * @return The value of the 'alternateNames' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.alternateName> getAlternateNames() {
    return alternateNames;
  }


  /**
   * Sets the value of the 'alternateNames' field.
   * @param value the value to set.
   */
  public void setAlternateNames(java.util.List<com.maersk.geography.smds.operations.msk.alternateName> value) {
    this.alternateNames = value;
  }

  /**
   * Gets the value of the 'alternateCodes' field.
   * @return The value of the 'alternateCodes' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> getAlternateCodes() {
    return alternateCodes;
  }


  /**
   * Sets the value of the 'alternateCodes' field.
   * @param value the value to set.
   */
  public void setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> value) {
    this.alternateCodes = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public com.maersk.geography.smds.operations.msk.country getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(com.maersk.geography.smds.operations.msk.country value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'parent' field.
   * @return The value of the 'parent' field.
   */
  public com.maersk.geography.smds.operations.msk.parent getParent() {
    return parent;
  }


  /**
   * Sets the value of the 'parent' field.
   * @param value the value to set.
   */
  public void setParent(com.maersk.geography.smds.operations.msk.parent value) {
    this.parent = value;
  }

  /**
   * Gets the value of the 'subCityParents' field.
   * @return The value of the 'subCityParents' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> getSubCityParents() {
    return subCityParents;
  }


  /**
   * Sets the value of the 'subCityParents' field.
   * @param value the value to set.
   */
  public void setSubCityParents(java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> value) {
    this.subCityParents = value;
  }

  /**
   * Gets the value of the 'bdas' field.
   * @return The value of the 'bdas' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.bda> getBdas() {
    return bdas;
  }


  /**
   * Sets the value of the 'bdas' field.
   * @param value the value to set.
   */
  public void setBdas(java.util.List<com.maersk.geography.smds.operations.msk.bda> value) {
    this.bdas = value;
  }

  /**
   * Gets the value of the 'bdaLocations' field.
   * @return The value of the 'bdaLocations' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> getBdaLocations() {
    return bdaLocations;
  }


  /**
   * Sets the value of the 'bdaLocations' field.
   * @param value the value to set.
   */
  public void setBdaLocations(java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> value) {
    this.bdaLocations = value;
  }

  /**
   * Creates a new geography RecordBuilder.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder() {
    return new com.maersk.geography.smds.operations.msk.geography.Builder();
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder(com.maersk.geography.smds.operations.msk.geography.Builder other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.geography.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.geography.Builder(other);
    }
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing geography instance.
   * @param other The existing instance to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder(com.maersk.geography.smds.operations.msk.geography other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.geography.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.geography.Builder(other);
    }
  }

  /**
   * RecordBuilder for geography instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<geography>
    implements org.apache.avro.data.RecordBuilder<geography> {

    /** The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N */
    private java.lang.String geoId;
    /** The geoType of Geography object. Example: For Copenhagen city GeoType is City */
    private java.lang.String geoType;
    /** The name of Geography object. Example: Copenhagen */
    private java.lang.String name;
    /** The status of Geography object. Example: Active or Inactive */
    private java.lang.String status;
    /** The Valid fromdate of Geography object. Example: 1900-01-01 */
    private java.time.LocalDate validFrom;
    /** The Valid todate of Geography object. Example: 9999-12-31 */
    private java.time.LocalDate validTo;
    /** The longitude of Geography object. Example: 73.859301 */
    private java.lang.String longitude;
    /** The latitude of Geography object. Example: 18.531206 */
    private java.lang.String latitude;
    /** The time zone of Geography object .Example: EST */
    private java.lang.String timeZone;
    /** The day light saving time of Geography object. Example: EDT */
    private java.lang.String daylightSavingTime;
    /** The utc offset minutes  of Geography object. Example: -360 */
    private java.lang.String utcOffsetMinutes;
    /** The recent day light saving start date of Geography object. Example: 03-10-21 */
    private java.time.LocalDate daylightSavingStart;
    /** The recent day light saving end date of Geography object. Example: 03-04-22 */
    private java.time.LocalDate daylightSavingEnd;
    /** The day light saving shift minutes of Geography object. Example: 60 */
    private java.lang.String daylightSavingShiftMinutes;
    /** The description of Geography object. Example: Olson update */
    private java.lang.String description;
    /** The work around reason of  Geography object. Example: US Military routing */
    private java.lang.String workaroundReason;
    /** The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO */
    private java.lang.String restricted;
    /** The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory */
    private java.lang.String postalCodeMandatory;
    /** The state province  mandatory check of country only. */
    private java.lang.String stateProvinceMandatory;
    /** The dialing code  of country. Example: 251 */
    private java.lang.String dialingCode;
    /** The dialing code description of country. Example: +251 */
    private java.lang.String dialingCodeDescription;
    /** The port flag of geography object. Example: true or false */
    private boolean portFlag;
    /** The olson timezone  of geography object. Example: Europe/London */
    private java.lang.String olsonTimezone;
    /** The business defined area type of  geography object. Example: FINANCIAL,POOL */
    private java.lang.String bdaType;
    /** The hamburgsud name of  geography object. Example: Pune */
    private java.lang.String hsudName;
    /** Maersk City check. Example: true or false */
    private boolean isMaerskCity;
    private java.util.List<com.maersk.geography.smds.operations.msk.alternateName> alternateNames;
    private java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> alternateCodes;
    private com.maersk.geography.smds.operations.msk.country country;
    private com.maersk.geography.smds.operations.msk.country.Builder countryBuilder;
    private com.maersk.geography.smds.operations.msk.parent parent;
    private com.maersk.geography.smds.operations.msk.parent.Builder parentBuilder;
    private java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParents;
    private java.util.List<com.maersk.geography.smds.operations.msk.bda> bdas;
    private java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.geography.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geoId)) {
        this.geoId = data().deepCopy(fields()[0].schema(), other.geoId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.geoType)) {
        this.geoType = data().deepCopy(fields()[1].schema(), other.geoType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[8].schema(), other.timeZone);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[10].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[11].schema(), other.daylightSavingStart);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[12].schema(), other.daylightSavingEnd);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[13].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.description)) {
        this.description = data().deepCopy(fields()[14].schema(), other.description);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[15].schema(), other.workaroundReason);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.restricted)) {
        this.restricted = data().deepCopy(fields()[16].schema(), other.restricted);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[17].schema(), other.postalCodeMandatory);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.stateProvinceMandatory)) {
        this.stateProvinceMandatory = data().deepCopy(fields()[18].schema(), other.stateProvinceMandatory);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[19].schema(), other.dialingCode);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[20].schema(), other.dialingCodeDescription);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[21].schema(), other.portFlag);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[22].schema(), other.olsonTimezone);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[23].schema(), other.bdaType);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[24].schema(), other.hsudName);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.isMaerskCity)) {
        this.isMaerskCity = data().deepCopy(fields()[25].schema(), other.isMaerskCity);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[26].schema(), other.alternateNames);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[27].schema(), other.alternateCodes);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.country)) {
        this.country = data().deepCopy(fields()[28].schema(), other.country);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (other.hasCountryBuilder()) {
        this.countryBuilder = com.maersk.geography.smds.operations.msk.country.newBuilder(other.getCountryBuilder());
      }
      if (isValidValue(fields()[29], other.parent)) {
        this.parent = data().deepCopy(fields()[29].schema(), other.parent);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (other.hasParentBuilder()) {
        this.parentBuilder = com.maersk.geography.smds.operations.msk.parent.newBuilder(other.getParentBuilder());
      }
      if (isValidValue(fields()[30], other.subCityParents)) {
        this.subCityParents = data().deepCopy(fields()[30].schema(), other.subCityParents);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.bdas)) {
        this.bdas = data().deepCopy(fields()[31].schema(), other.bdas);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[32].schema(), other.bdaLocations);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
    }

    /**
     * Creates a Builder by copying an existing geography instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.geography other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.geoId)) {
        this.geoId = data().deepCopy(fields()[0].schema(), other.geoId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geoType)) {
        this.geoType = data().deepCopy(fields()[1].schema(), other.geoType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[8].schema(), other.timeZone);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[10].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[11].schema(), other.daylightSavingStart);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[12].schema(), other.daylightSavingEnd);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[13].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.description)) {
        this.description = data().deepCopy(fields()[14].schema(), other.description);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[15].schema(), other.workaroundReason);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.restricted)) {
        this.restricted = data().deepCopy(fields()[16].schema(), other.restricted);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[17].schema(), other.postalCodeMandatory);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.stateProvinceMandatory)) {
        this.stateProvinceMandatory = data().deepCopy(fields()[18].schema(), other.stateProvinceMandatory);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[19].schema(), other.dialingCode);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[20].schema(), other.dialingCodeDescription);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[21].schema(), other.portFlag);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[22].schema(), other.olsonTimezone);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[23].schema(), other.bdaType);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[24].schema(), other.hsudName);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.isMaerskCity)) {
        this.isMaerskCity = data().deepCopy(fields()[25].schema(), other.isMaerskCity);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[26].schema(), other.alternateNames);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[27].schema(), other.alternateCodes);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.country)) {
        this.country = data().deepCopy(fields()[28].schema(), other.country);
        fieldSetFlags()[28] = true;
      }
      this.countryBuilder = null;
      if (isValidValue(fields()[29], other.parent)) {
        this.parent = data().deepCopy(fields()[29].schema(), other.parent);
        fieldSetFlags()[29] = true;
      }
      this.parentBuilder = null;
      if (isValidValue(fields()[30], other.subCityParents)) {
        this.subCityParents = data().deepCopy(fields()[30].schema(), other.subCityParents);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.bdas)) {
        this.bdas = data().deepCopy(fields()[31].schema(), other.bdas);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[32].schema(), other.bdaLocations);
        fieldSetFlags()[32] = true;
      }
    }

    /**
      * Gets the value of the 'geoId' field.
      * The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
      * @return The value.
      */
    public java.lang.String getGeoId() {
      return geoId;
    }


    /**
      * Sets the value of the 'geoId' field.
      * The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
      * @param value The value of 'geoId'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setGeoId(java.lang.String value) {
      validate(fields()[0], value);
      this.geoId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'geoId' field has been set.
      * The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
      * @return True if the 'geoId' field has been set, false otherwise.
      */
    public boolean hasGeoId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'geoId' field.
      * The geoId of Geography object. Example: Pune city GeoId is 00ADIYBEC5L6N
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearGeoId() {
      geoId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoType' field.
      * The geoType of Geography object. Example: For Copenhagen city GeoType is City
      * @return The value.
      */
    public java.lang.String getGeoType() {
      return geoType;
    }


    /**
      * Sets the value of the 'geoType' field.
      * The geoType of Geography object. Example: For Copenhagen city GeoType is City
      * @param value The value of 'geoType'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setGeoType(java.lang.String value) {
      validate(fields()[1], value);
      this.geoType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geoType' field has been set.
      * The geoType of Geography object. Example: For Copenhagen city GeoType is City
      * @return True if the 'geoType' field has been set, false otherwise.
      */
    public boolean hasGeoType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'geoType' field.
      * The geoType of Geography object. Example: For Copenhagen city GeoType is City
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearGeoType() {
      geoType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The name of Geography object. Example: Copenhagen
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * The name of Geography object. Example: Copenhagen
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The name of Geography object. Example: Copenhagen
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * The name of Geography object. Example: Copenhagen
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * The status of Geography object. Example: Active or Inactive
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * The status of Geography object. Example: Active or Inactive
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * The status of Geography object. Example: Active or Inactive
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * The status of Geography object. Example: Active or Inactive
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * The Valid fromdate of Geography object. Example: 1900-01-01
      * @return The value.
      */
    public java.time.LocalDate getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * The Valid fromdate of Geography object. Example: 1900-01-01
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setValidFrom(java.time.LocalDate value) {
      validate(fields()[4], value);
      this.validFrom = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * The Valid fromdate of Geography object. Example: 1900-01-01
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * The Valid fromdate of Geography object. Example: 1900-01-01
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearValidFrom() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * The Valid todate of Geography object. Example: 9999-12-31
      * @return The value.
      */
    public java.time.LocalDate getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * The Valid todate of Geography object. Example: 9999-12-31
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setValidTo(java.time.LocalDate value) {
      validate(fields()[5], value);
      this.validTo = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * The Valid todate of Geography object. Example: 9999-12-31
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'validTo' field.
      * The Valid todate of Geography object. Example: 9999-12-31
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearValidTo() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * The longitude of Geography object. Example: 73.859301
      * @return The value.
      */
    public java.lang.String getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * The longitude of Geography object. Example: 73.859301
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setLongitude(java.lang.String value) {
      validate(fields()[6], value);
      this.longitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * The longitude of Geography object. Example: 73.859301
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'longitude' field.
      * The longitude of Geography object. Example: 73.859301
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * The latitude of Geography object. Example: 18.531206
      * @return The value.
      */
    public java.lang.String getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * The latitude of Geography object. Example: 18.531206
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setLatitude(java.lang.String value) {
      validate(fields()[7], value);
      this.latitude = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * The latitude of Geography object. Example: 18.531206
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'latitude' field.
      * The latitude of Geography object. Example: 18.531206
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeZone' field.
      * The time zone of Geography object .Example: EST
      * @return The value.
      */
    public java.lang.String getTimeZone() {
      return timeZone;
    }


    /**
      * Sets the value of the 'timeZone' field.
      * The time zone of Geography object .Example: EST
      * @param value The value of 'timeZone'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setTimeZone(java.lang.String value) {
      validate(fields()[8], value);
      this.timeZone = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'timeZone' field has been set.
      * The time zone of Geography object .Example: EST
      * @return True if the 'timeZone' field has been set, false otherwise.
      */
    public boolean hasTimeZone() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'timeZone' field.
      * The time zone of Geography object .Example: EST
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearTimeZone() {
      timeZone = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingTime' field.
      * The day light saving time of Geography object. Example: EDT
      * @return The value.
      */
    public java.lang.String getDaylightSavingTime() {
      return daylightSavingTime;
    }


    /**
      * Sets the value of the 'daylightSavingTime' field.
      * The day light saving time of Geography object. Example: EDT
      * @param value The value of 'daylightSavingTime'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingTime(java.lang.String value) {
      validate(fields()[9], value);
      this.daylightSavingTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingTime' field has been set.
      * The day light saving time of Geography object. Example: EDT
      * @return True if the 'daylightSavingTime' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'daylightSavingTime' field.
      * The day light saving time of Geography object. Example: EDT
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingTime() {
      daylightSavingTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'utcOffsetMinutes' field.
      * The utc offset minutes  of Geography object. Example: -360
      * @return The value.
      */
    public java.lang.String getUtcOffsetMinutes() {
      return utcOffsetMinutes;
    }


    /**
      * Sets the value of the 'utcOffsetMinutes' field.
      * The utc offset minutes  of Geography object. Example: -360
      * @param value The value of 'utcOffsetMinutes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setUtcOffsetMinutes(java.lang.String value) {
      validate(fields()[10], value);
      this.utcOffsetMinutes = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'utcOffsetMinutes' field has been set.
      * The utc offset minutes  of Geography object. Example: -360
      * @return True if the 'utcOffsetMinutes' field has been set, false otherwise.
      */
    public boolean hasUtcOffsetMinutes() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'utcOffsetMinutes' field.
      * The utc offset minutes  of Geography object. Example: -360
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearUtcOffsetMinutes() {
      utcOffsetMinutes = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingStart' field.
      * The recent day light saving start date of Geography object. Example: 03-10-21
      * @return The value.
      */
    public java.time.LocalDate getDaylightSavingStart() {
      return daylightSavingStart;
    }


    /**
      * Sets the value of the 'daylightSavingStart' field.
      * The recent day light saving start date of Geography object. Example: 03-10-21
      * @param value The value of 'daylightSavingStart'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingStart(java.time.LocalDate value) {
      validate(fields()[11], value);
      this.daylightSavingStart = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingStart' field has been set.
      * The recent day light saving start date of Geography object. Example: 03-10-21
      * @return True if the 'daylightSavingStart' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingStart() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'daylightSavingStart' field.
      * The recent day light saving start date of Geography object. Example: 03-10-21
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingStart() {
      daylightSavingStart = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingEnd' field.
      * The recent day light saving end date of Geography object. Example: 03-04-22
      * @return The value.
      */
    public java.time.LocalDate getDaylightSavingEnd() {
      return daylightSavingEnd;
    }


    /**
      * Sets the value of the 'daylightSavingEnd' field.
      * The recent day light saving end date of Geography object. Example: 03-04-22
      * @param value The value of 'daylightSavingEnd'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingEnd(java.time.LocalDate value) {
      validate(fields()[12], value);
      this.daylightSavingEnd = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingEnd' field has been set.
      * The recent day light saving end date of Geography object. Example: 03-04-22
      * @return True if the 'daylightSavingEnd' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingEnd() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'daylightSavingEnd' field.
      * The recent day light saving end date of Geography object. Example: 03-04-22
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingEnd() {
      daylightSavingEnd = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingShiftMinutes' field.
      * The day light saving shift minutes of Geography object. Example: 60
      * @return The value.
      */
    public java.lang.String getDaylightSavingShiftMinutes() {
      return daylightSavingShiftMinutes;
    }


    /**
      * Sets the value of the 'daylightSavingShiftMinutes' field.
      * The day light saving shift minutes of Geography object. Example: 60
      * @param value The value of 'daylightSavingShiftMinutes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingShiftMinutes(java.lang.String value) {
      validate(fields()[13], value);
      this.daylightSavingShiftMinutes = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingShiftMinutes' field has been set.
      * The day light saving shift minutes of Geography object. Example: 60
      * @return True if the 'daylightSavingShiftMinutes' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingShiftMinutes() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'daylightSavingShiftMinutes' field.
      * The day light saving shift minutes of Geography object. Example: 60
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingShiftMinutes() {
      daylightSavingShiftMinutes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * The description of Geography object. Example: Olson update
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * The description of Geography object. Example: Olson update
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDescription(java.lang.String value) {
      validate(fields()[14], value);
      this.description = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * The description of Geography object. Example: Olson update
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'description' field.
      * The description of Geography object. Example: Olson update
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDescription() {
      description = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'workaroundReason' field.
      * The work around reason of  Geography object. Example: US Military routing
      * @return The value.
      */
    public java.lang.String getWorkaroundReason() {
      return workaroundReason;
    }


    /**
      * Sets the value of the 'workaroundReason' field.
      * The work around reason of  Geography object. Example: US Military routing
      * @param value The value of 'workaroundReason'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setWorkaroundReason(java.lang.String value) {
      validate(fields()[15], value);
      this.workaroundReason = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'workaroundReason' field has been set.
      * The work around reason of  Geography object. Example: US Military routing
      * @return True if the 'workaroundReason' field has been set, false otherwise.
      */
    public boolean hasWorkaroundReason() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'workaroundReason' field.
      * The work around reason of  Geography object. Example: US Military routing
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearWorkaroundReason() {
      workaroundReason = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'restricted' field.
      * The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
      * @return The value.
      */
    public java.lang.String getRestricted() {
      return restricted;
    }


    /**
      * Sets the value of the 'restricted' field.
      * The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
      * @param value The value of 'restricted'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setRestricted(java.lang.String value) {
      validate(fields()[16], value);
      this.restricted = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'restricted' field has been set.
      * The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
      * @return True if the 'restricted' field has been set, false otherwise.
      */
    public boolean hasRestricted() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'restricted' field.
      * The restricted check of country  object only either YES or NO.For Other Objects like City,state,continent and site its should be null.Example: YES or NO
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearRestricted() {
      restricted = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCodeMandatory' field.
      * The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
      * @return The value.
      */
    public java.lang.String getPostalCodeMandatory() {
      return postalCodeMandatory;
    }


    /**
      * Sets the value of the 'postalCodeMandatory' field.
      * The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
      * @param value The value of 'postalCodeMandatory'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setPostalCodeMandatory(java.lang.String value) {
      validate(fields()[17], value);
      this.postalCodeMandatory = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCodeMandatory' field has been set.
      * The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
      * @return True if the 'postalCodeMandatory' field has been set, false otherwise.
      */
    public boolean hasPostalCodeMandatory() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'postalCodeMandatory' field.
      * The postal code mandatory check of country object only either Optional or Mandatory. For Other Objects like City,state,continent and site its should be null. Example: Optional or Mandatory
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearPostalCodeMandatory() {
      postalCodeMandatory = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateProvinceMandatory' field.
      * The state province  mandatory check of country only.
      * @return The value.
      */
    public java.lang.String getStateProvinceMandatory() {
      return stateProvinceMandatory;
    }


    /**
      * Sets the value of the 'stateProvinceMandatory' field.
      * The state province  mandatory check of country only.
      * @param value The value of 'stateProvinceMandatory'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setStateProvinceMandatory(java.lang.String value) {
      validate(fields()[18], value);
      this.stateProvinceMandatory = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'stateProvinceMandatory' field has been set.
      * The state province  mandatory check of country only.
      * @return True if the 'stateProvinceMandatory' field has been set, false otherwise.
      */
    public boolean hasStateProvinceMandatory() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'stateProvinceMandatory' field.
      * The state province  mandatory check of country only.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearStateProvinceMandatory() {
      stateProvinceMandatory = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCode' field.
      * The dialing code  of country. Example: 251
      * @return The value.
      */
    public java.lang.String getDialingCode() {
      return dialingCode;
    }


    /**
      * Sets the value of the 'dialingCode' field.
      * The dialing code  of country. Example: 251
      * @param value The value of 'dialingCode'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDialingCode(java.lang.String value) {
      validate(fields()[19], value);
      this.dialingCode = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCode' field has been set.
      * The dialing code  of country. Example: 251
      * @return True if the 'dialingCode' field has been set, false otherwise.
      */
    public boolean hasDialingCode() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'dialingCode' field.
      * The dialing code  of country. Example: 251
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDialingCode() {
      dialingCode = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCodeDescription' field.
      * The dialing code description of country. Example: +251
      * @return The value.
      */
    public java.lang.String getDialingCodeDescription() {
      return dialingCodeDescription;
    }


    /**
      * Sets the value of the 'dialingCodeDescription' field.
      * The dialing code description of country. Example: +251
      * @param value The value of 'dialingCodeDescription'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDialingCodeDescription(java.lang.String value) {
      validate(fields()[20], value);
      this.dialingCodeDescription = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCodeDescription' field has been set.
      * The dialing code description of country. Example: +251
      * @return True if the 'dialingCodeDescription' field has been set, false otherwise.
      */
    public boolean hasDialingCodeDescription() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'dialingCodeDescription' field.
      * The dialing code description of country. Example: +251
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDialingCodeDescription() {
      dialingCodeDescription = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'portFlag' field.
      * The port flag of geography object. Example: true or false
      * @return The value.
      */
    public boolean getPortFlag() {
      return portFlag;
    }


    /**
      * Sets the value of the 'portFlag' field.
      * The port flag of geography object. Example: true or false
      * @param value The value of 'portFlag'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setPortFlag(boolean value) {
      validate(fields()[21], value);
      this.portFlag = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'portFlag' field has been set.
      * The port flag of geography object. Example: true or false
      * @return True if the 'portFlag' field has been set, false otherwise.
      */
    public boolean hasPortFlag() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'portFlag' field.
      * The port flag of geography object. Example: true or false
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearPortFlag() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'olsonTimezone' field.
      * The olson timezone  of geography object. Example: Europe/London
      * @return The value.
      */
    public java.lang.String getOlsonTimezone() {
      return olsonTimezone;
    }


    /**
      * Sets the value of the 'olsonTimezone' field.
      * The olson timezone  of geography object. Example: Europe/London
      * @param value The value of 'olsonTimezone'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setOlsonTimezone(java.lang.String value) {
      validate(fields()[22], value);
      this.olsonTimezone = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'olsonTimezone' field has been set.
      * The olson timezone  of geography object. Example: Europe/London
      * @return True if the 'olsonTimezone' field has been set, false otherwise.
      */
    public boolean hasOlsonTimezone() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'olsonTimezone' field.
      * The olson timezone  of geography object. Example: Europe/London
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearOlsonTimezone() {
      olsonTimezone = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaType' field.
      * The business defined area type of  geography object. Example: FINANCIAL,POOL
      * @return The value.
      */
    public java.lang.String getBdaType() {
      return bdaType;
    }


    /**
      * Sets the value of the 'bdaType' field.
      * The business defined area type of  geography object. Example: FINANCIAL,POOL
      * @param value The value of 'bdaType'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBdaType(java.lang.String value) {
      validate(fields()[23], value);
      this.bdaType = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaType' field has been set.
      * The business defined area type of  geography object. Example: FINANCIAL,POOL
      * @return True if the 'bdaType' field has been set, false otherwise.
      */
    public boolean hasBdaType() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'bdaType' field.
      * The business defined area type of  geography object. Example: FINANCIAL,POOL
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBdaType() {
      bdaType = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsudName' field.
      * The hamburgsud name of  geography object. Example: Pune
      * @return The value.
      */
    public java.lang.String getHsudName() {
      return hsudName;
    }


    /**
      * Sets the value of the 'hsudName' field.
      * The hamburgsud name of  geography object. Example: Pune
      * @param value The value of 'hsudName'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setHsudName(java.lang.String value) {
      validate(fields()[24], value);
      this.hsudName = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'hsudName' field has been set.
      * The hamburgsud name of  geography object. Example: Pune
      * @return True if the 'hsudName' field has been set, false otherwise.
      */
    public boolean hasHsudName() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'hsudName' field.
      * The hamburgsud name of  geography object. Example: Pune
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearHsudName() {
      hsudName = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMaerskCity' field.
      * Maersk City check. Example: true or false
      * @return The value.
      */
    public boolean getIsMaerskCity() {
      return isMaerskCity;
    }


    /**
      * Sets the value of the 'isMaerskCity' field.
      * Maersk City check. Example: true or false
      * @param value The value of 'isMaerskCity'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setIsMaerskCity(boolean value) {
      validate(fields()[25], value);
      this.isMaerskCity = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'isMaerskCity' field has been set.
      * Maersk City check. Example: true or false
      * @return True if the 'isMaerskCity' field has been set, false otherwise.
      */
    public boolean hasIsMaerskCity() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'isMaerskCity' field.
      * Maersk City check. Example: true or false
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearIsMaerskCity() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateNames' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.alternateName> getAlternateNames() {
      return alternateNames;
    }


    /**
      * Sets the value of the 'alternateNames' field.
      * @param value The value of 'alternateNames'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setAlternateNames(java.util.List<com.maersk.geography.smds.operations.msk.alternateName> value) {
      validate(fields()[26], value);
      this.alternateNames = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateNames' field has been set.
      * @return True if the 'alternateNames' field has been set, false otherwise.
      */
    public boolean hasAlternateNames() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'alternateNames' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearAlternateNames() {
      alternateNames = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateCodes' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> getAlternateCodes() {
      return alternateCodes;
    }


    /**
      * Sets the value of the 'alternateCodes' field.
      * @param value The value of 'alternateCodes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.alternateCode> value) {
      validate(fields()[27], value);
      this.alternateCodes = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateCodes' field has been set.
      * @return True if the 'alternateCodes' field has been set, false otherwise.
      */
    public boolean hasAlternateCodes() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'alternateCodes' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearAlternateCodes() {
      alternateCodes = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public com.maersk.geography.smds.operations.msk.country getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setCountry(com.maersk.geography.smds.operations.msk.country value) {
      validate(fields()[28], value);
      this.countryBuilder = null;
      this.country = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[28];
    }

    /**
     * Gets the Builder instance for the 'country' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.maersk.geography.smds.operations.msk.country.Builder getCountryBuilder() {
      if (countryBuilder == null) {
        if (hasCountry()) {
          setCountryBuilder(com.maersk.geography.smds.operations.msk.country.newBuilder(country));
        } else {
          setCountryBuilder(com.maersk.geography.smds.operations.msk.country.newBuilder());
        }
      }
      return countryBuilder;
    }

    /**
     * Sets the Builder instance for the 'country' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.maersk.geography.smds.operations.msk.geography.Builder setCountryBuilder(com.maersk.geography.smds.operations.msk.country.Builder value) {
      clearCountry();
      countryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'country' field has an active Builder instance
     * @return True if the 'country' field has an active Builder instance
     */
    public boolean hasCountryBuilder() {
      return countryBuilder != null;
    }

    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearCountry() {
      country = null;
      countryBuilder = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'parent' field.
      * @return The value.
      */
    public com.maersk.geography.smds.operations.msk.parent getParent() {
      return parent;
    }


    /**
      * Sets the value of the 'parent' field.
      * @param value The value of 'parent'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setParent(com.maersk.geography.smds.operations.msk.parent value) {
      validate(fields()[29], value);
      this.parentBuilder = null;
      this.parent = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'parent' field has been set.
      * @return True if the 'parent' field has been set, false otherwise.
      */
    public boolean hasParent() {
      return fieldSetFlags()[29];
    }

    /**
     * Gets the Builder instance for the 'parent' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.maersk.geography.smds.operations.msk.parent.Builder getParentBuilder() {
      if (parentBuilder == null) {
        if (hasParent()) {
          setParentBuilder(com.maersk.geography.smds.operations.msk.parent.newBuilder(parent));
        } else {
          setParentBuilder(com.maersk.geography.smds.operations.msk.parent.newBuilder());
        }
      }
      return parentBuilder;
    }

    /**
     * Sets the Builder instance for the 'parent' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.maersk.geography.smds.operations.msk.geography.Builder setParentBuilder(com.maersk.geography.smds.operations.msk.parent.Builder value) {
      clearParent();
      parentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'parent' field has an active Builder instance
     * @return True if the 'parent' field has an active Builder instance
     */
    public boolean hasParentBuilder() {
      return parentBuilder != null;
    }

    /**
      * Clears the value of the 'parent' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearParent() {
      parent = null;
      parentBuilder = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCityParents' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> getSubCityParents() {
      return subCityParents;
    }


    /**
      * Sets the value of the 'subCityParents' field.
      * @param value The value of 'subCityParents'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setSubCityParents(java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> value) {
      validate(fields()[30], value);
      this.subCityParents = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'subCityParents' field has been set.
      * @return True if the 'subCityParents' field has been set, false otherwise.
      */
    public boolean hasSubCityParents() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'subCityParents' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearSubCityParents() {
      subCityParents = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdas' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.bda> getBdas() {
      return bdas;
    }


    /**
      * Sets the value of the 'bdas' field.
      * @param value The value of 'bdas'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBdas(java.util.List<com.maersk.geography.smds.operations.msk.bda> value) {
      validate(fields()[31], value);
      this.bdas = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'bdas' field has been set.
      * @return True if the 'bdas' field has been set, false otherwise.
      */
    public boolean hasBdas() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'bdas' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBdas() {
      bdas = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaLocations' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> getBdaLocations() {
      return bdaLocations;
    }


    /**
      * Sets the value of the 'bdaLocations' field.
      * @param value The value of 'bdaLocations'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBdaLocations(java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> value) {
      validate(fields()[32], value);
      this.bdaLocations = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaLocations' field has been set.
      * @return True if the 'bdaLocations' field has been set, false otherwise.
      */
    public boolean hasBdaLocations() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'bdaLocations' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBdaLocations() {
      bdaLocations = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public geography build() {
      try {
        geography record = new geography();
        record.geoId = fieldSetFlags()[0] ? this.geoId : (java.lang.String) defaultValue(fields()[0]);
        record.geoType = fieldSetFlags()[1] ? this.geoType : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.String) defaultValue(fields()[3]);
        record.validFrom = fieldSetFlags()[4] ? this.validFrom : (java.time.LocalDate) defaultValue(fields()[4]);
        record.validTo = fieldSetFlags()[5] ? this.validTo : (java.time.LocalDate) defaultValue(fields()[5]);
        record.longitude = fieldSetFlags()[6] ? this.longitude : (java.lang.String) defaultValue(fields()[6]);
        record.latitude = fieldSetFlags()[7] ? this.latitude : (java.lang.String) defaultValue(fields()[7]);
        record.timeZone = fieldSetFlags()[8] ? this.timeZone : (java.lang.String) defaultValue(fields()[8]);
        record.daylightSavingTime = fieldSetFlags()[9] ? this.daylightSavingTime : (java.lang.String) defaultValue(fields()[9]);
        record.utcOffsetMinutes = fieldSetFlags()[10] ? this.utcOffsetMinutes : (java.lang.String) defaultValue(fields()[10]);
        record.daylightSavingStart = fieldSetFlags()[11] ? this.daylightSavingStart : (java.time.LocalDate) defaultValue(fields()[11]);
        record.daylightSavingEnd = fieldSetFlags()[12] ? this.daylightSavingEnd : (java.time.LocalDate) defaultValue(fields()[12]);
        record.daylightSavingShiftMinutes = fieldSetFlags()[13] ? this.daylightSavingShiftMinutes : (java.lang.String) defaultValue(fields()[13]);
        record.description = fieldSetFlags()[14] ? this.description : (java.lang.String) defaultValue(fields()[14]);
        record.workaroundReason = fieldSetFlags()[15] ? this.workaroundReason : (java.lang.String) defaultValue(fields()[15]);
        record.restricted = fieldSetFlags()[16] ? this.restricted : (java.lang.String) defaultValue(fields()[16]);
        record.postalCodeMandatory = fieldSetFlags()[17] ? this.postalCodeMandatory : (java.lang.String) defaultValue(fields()[17]);
        record.stateProvinceMandatory = fieldSetFlags()[18] ? this.stateProvinceMandatory : (java.lang.String) defaultValue(fields()[18]);
        record.dialingCode = fieldSetFlags()[19] ? this.dialingCode : (java.lang.String) defaultValue(fields()[19]);
        record.dialingCodeDescription = fieldSetFlags()[20] ? this.dialingCodeDescription : (java.lang.String) defaultValue(fields()[20]);
        record.portFlag = fieldSetFlags()[21] ? this.portFlag : (java.lang.Boolean) defaultValue(fields()[21]);
        record.olsonTimezone = fieldSetFlags()[22] ? this.olsonTimezone : (java.lang.String) defaultValue(fields()[22]);
        record.bdaType = fieldSetFlags()[23] ? this.bdaType : (java.lang.String) defaultValue(fields()[23]);
        record.hsudName = fieldSetFlags()[24] ? this.hsudName : (java.lang.String) defaultValue(fields()[24]);
        record.isMaerskCity = fieldSetFlags()[25] ? this.isMaerskCity : (java.lang.Boolean) defaultValue(fields()[25]);
        record.alternateNames = fieldSetFlags()[26] ? this.alternateNames : (java.util.List<com.maersk.geography.smds.operations.msk.alternateName>) defaultValue(fields()[26]);
        record.alternateCodes = fieldSetFlags()[27] ? this.alternateCodes : (java.util.List<com.maersk.geography.smds.operations.msk.alternateCode>) defaultValue(fields()[27]);
        if (countryBuilder != null) {
          try {
            record.country = this.countryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("country"));
            throw e;
          }
        } else {
          record.country = fieldSetFlags()[28] ? this.country : (com.maersk.geography.smds.operations.msk.country) defaultValue(fields()[28]);
        }
        if (parentBuilder != null) {
          try {
            record.parent = this.parentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("parent"));
            throw e;
          }
        } else {
          record.parent = fieldSetFlags()[29] ? this.parent : (com.maersk.geography.smds.operations.msk.parent) defaultValue(fields()[29]);
        }
        record.subCityParents = fieldSetFlags()[30] ? this.subCityParents : (java.util.List<com.maersk.geography.smds.operations.msk.subCityParent>) defaultValue(fields()[30]);
        record.bdas = fieldSetFlags()[31] ? this.bdas : (java.util.List<com.maersk.geography.smds.operations.msk.bda>) defaultValue(fields()[31]);
        record.bdaLocations = fieldSetFlags()[32] ? this.bdaLocations : (java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation>) defaultValue(fields()[32]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<geography>
    WRITER$ = (org.apache.avro.io.DatumWriter<geography>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<geography>
    READER$ = (org.apache.avro.io.DatumReader<geography>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










