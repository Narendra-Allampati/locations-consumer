/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.Geography.smds.operations.MSK;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Geography Entity Information Which includes AltNm,AltCd,fence,Country,Parent,BDA and BDALoc  */
@org.apache.avro.specific.AvroGenerated
public class geography extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1566138591297374980L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"geography\",\"namespace\":\"com.maersk.Geography.smds.operations.MSK\",\"doc\":\"Geography Entity Information Which includes AltNm,AltCd,fence,Country,Parent,BDA and BDALoc \",\"fields\":[{\"name\":\"geoType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"validFrom\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"validTo\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"longitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"latitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"timeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"daylightSavingTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"utcOffsetMinutes\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"daylightSavingStart\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"daylightSavingEnd\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"daylightSavingShiftMinutes\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"workaroundReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"restricted\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"postalCodeMandatoryFlag\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"stateProvienceMandatory\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"dialingCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"dialingCodedescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"portFlag\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"olsonTimezone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"hsudName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateNames\",\"doc\":\"AlternateNames Details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateCodes\",\"doc\":\"AlternateCodes Details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"country\",\"doc\":\"Country Details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"countryAlternateCodes\",\"doc\":\"Country AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}}]},{\"name\":\"parent\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"parent\",\"doc\":\"Parent Details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"parentAlternateCode\",\"doc\":\"Parent AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}}]},{\"name\":\"subCityParent\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParent\",\"doc\":\"SubCityParent details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParentAlternateCode\",\"doc\":\"SubCityParent AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}}]},{\"name\":\"bda\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bda\",\"doc\":\"BDA Details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaAlternateCode\",\"doc\":\"BDA AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}}]},{\"name\":\"bdaLocations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocation\",\"doc\":\"BDA Location Details\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocationAlternateCode\",\"doc\":\"BDALocation AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<geography> ENCODER =
      new BinaryMessageEncoder<geography>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<geography> DECODER =
      new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<geography> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<geography> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<geography> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this geography to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a geography from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a geography instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static geography fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String geoType;
  private java.lang.String name;
  private java.lang.String status;
  private long validFrom;
  private long validTo;
  private java.lang.String longitude;
  private java.lang.String latitude;
  private java.lang.String timeZone;
  private java.lang.String daylightSavingTime;
  private java.lang.String utcOffsetMinutes;
  private java.lang.Long daylightSavingStart;
  private java.lang.Long daylightSavingEnd;
  private java.lang.String daylightSavingShiftMinutes;
  private java.lang.String description;
  private java.lang.String workaroundReason;
  private java.lang.String restricted;
  private java.lang.String postalCodeMandatoryFlag;
  private java.lang.String stateProvienceMandatory;
  private java.lang.String dialingCode;
  private java.lang.String dialingCodedescription;
  private java.lang.String portFlag;
  private java.lang.String olsonTimezone;
  private java.lang.String bdaType;
  private java.lang.String hsudName;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> alternateNames;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> alternateCodes;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.country> country;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.parent> parent;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> subCityParent;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.bda> bda;
  private java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> bdaLocations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public geography() {}

  /**
   * All-args constructor.
   * @param geoType The new value for geoType
   * @param name The new value for name
   * @param status The new value for status
   * @param validFrom The new value for validFrom
   * @param validTo The new value for validTo
   * @param longitude The new value for longitude
   * @param latitude The new value for latitude
   * @param timeZone The new value for timeZone
   * @param daylightSavingTime The new value for daylightSavingTime
   * @param utcOffsetMinutes The new value for utcOffsetMinutes
   * @param daylightSavingStart The new value for daylightSavingStart
   * @param daylightSavingEnd The new value for daylightSavingEnd
   * @param daylightSavingShiftMinutes The new value for daylightSavingShiftMinutes
   * @param description The new value for description
   * @param workaroundReason The new value for workaroundReason
   * @param restricted The new value for restricted
   * @param postalCodeMandatoryFlag The new value for postalCodeMandatoryFlag
   * @param stateProvienceMandatory The new value for stateProvienceMandatory
   * @param dialingCode The new value for dialingCode
   * @param dialingCodedescription The new value for dialingCodedescription
   * @param portFlag The new value for portFlag
   * @param olsonTimezone The new value for olsonTimezone
   * @param bdaType The new value for bdaType
   * @param hsudName The new value for hsudName
   * @param alternateNames The new value for alternateNames
   * @param alternateCodes The new value for alternateCodes
   * @param country The new value for country
   * @param parent The new value for parent
   * @param subCityParent The new value for subCityParent
   * @param bda The new value for bda
   * @param bdaLocations The new value for bdaLocations
   */
  public geography(java.lang.String geoType, java.lang.String name, java.lang.String status, java.lang.Long validFrom, java.lang.Long validTo, java.lang.String longitude, java.lang.String latitude, java.lang.String timeZone, java.lang.String daylightSavingTime, java.lang.String utcOffsetMinutes, java.lang.Long daylightSavingStart, java.lang.Long daylightSavingEnd, java.lang.String daylightSavingShiftMinutes, java.lang.String description, java.lang.String workaroundReason, java.lang.String restricted, java.lang.String postalCodeMandatoryFlag, java.lang.String stateProvienceMandatory, java.lang.String dialingCode, java.lang.String dialingCodedescription, java.lang.String portFlag, java.lang.String olsonTimezone, java.lang.String bdaType, java.lang.String hsudName, java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> alternateNames, java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> alternateCodes, java.util.List<com.maersk.Geography.smds.operations.MSK.country> country, java.util.List<com.maersk.Geography.smds.operations.MSK.parent> parent, java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> subCityParent, java.util.List<com.maersk.Geography.smds.operations.MSK.bda> bda, java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> bdaLocations) {
    this.geoType = geoType;
    this.name = name;
    this.status = status;
    this.validFrom = validFrom;
    this.validTo = validTo;
    this.longitude = longitude;
    this.latitude = latitude;
    this.timeZone = timeZone;
    this.daylightSavingTime = daylightSavingTime;
    this.utcOffsetMinutes = utcOffsetMinutes;
    this.daylightSavingStart = daylightSavingStart;
    this.daylightSavingEnd = daylightSavingEnd;
    this.daylightSavingShiftMinutes = daylightSavingShiftMinutes;
    this.description = description;
    this.workaroundReason = workaroundReason;
    this.restricted = restricted;
    this.postalCodeMandatoryFlag = postalCodeMandatoryFlag;
    this.stateProvienceMandatory = stateProvienceMandatory;
    this.dialingCode = dialingCode;
    this.dialingCodedescription = dialingCodedescription;
    this.portFlag = portFlag;
    this.olsonTimezone = olsonTimezone;
    this.bdaType = bdaType;
    this.hsudName = hsudName;
    this.alternateNames = alternateNames;
    this.alternateCodes = alternateCodes;
    this.country = country;
    this.parent = parent;
    this.subCityParent = subCityParent;
    this.bda = bda;
    this.bdaLocations = bdaLocations;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return geoType;
    case 1: return name;
    case 2: return status;
    case 3: return validFrom;
    case 4: return validTo;
    case 5: return longitude;
    case 6: return latitude;
    case 7: return timeZone;
    case 8: return daylightSavingTime;
    case 9: return utcOffsetMinutes;
    case 10: return daylightSavingStart;
    case 11: return daylightSavingEnd;
    case 12: return daylightSavingShiftMinutes;
    case 13: return description;
    case 14: return workaroundReason;
    case 15: return restricted;
    case 16: return postalCodeMandatoryFlag;
    case 17: return stateProvienceMandatory;
    case 18: return dialingCode;
    case 19: return dialingCodedescription;
    case 20: return portFlag;
    case 21: return olsonTimezone;
    case 22: return bdaType;
    case 23: return hsudName;
    case 24: return alternateNames;
    case 25: return alternateCodes;
    case 26: return country;
    case 27: return parent;
    case 28: return subCityParent;
    case 29: return bda;
    case 30: return bdaLocations;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: geoType = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: status = value$ != null ? value$.toString() : null; break;
    case 3: validFrom = (java.lang.Long)value$; break;
    case 4: validTo = (java.lang.Long)value$; break;
    case 5: longitude = value$ != null ? value$.toString() : null; break;
    case 6: latitude = value$ != null ? value$.toString() : null; break;
    case 7: timeZone = value$ != null ? value$.toString() : null; break;
    case 8: daylightSavingTime = value$ != null ? value$.toString() : null; break;
    case 9: utcOffsetMinutes = value$ != null ? value$.toString() : null; break;
    case 10: daylightSavingStart = (java.lang.Long)value$; break;
    case 11: daylightSavingEnd = (java.lang.Long)value$; break;
    case 12: daylightSavingShiftMinutes = value$ != null ? value$.toString() : null; break;
    case 13: description = value$ != null ? value$.toString() : null; break;
    case 14: workaroundReason = value$ != null ? value$.toString() : null; break;
    case 15: restricted = value$ != null ? value$.toString() : null; break;
    case 16: postalCodeMandatoryFlag = value$ != null ? value$.toString() : null; break;
    case 17: stateProvienceMandatory = value$ != null ? value$.toString() : null; break;
    case 18: dialingCode = value$ != null ? value$.toString() : null; break;
    case 19: dialingCodedescription = value$ != null ? value$.toString() : null; break;
    case 20: portFlag = value$ != null ? value$.toString() : null; break;
    case 21: olsonTimezone = value$ != null ? value$.toString() : null; break;
    case 22: bdaType = value$ != null ? value$.toString() : null; break;
    case 23: hsudName = value$ != null ? value$.toString() : null; break;
    case 24: alternateNames = (java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames>)value$; break;
    case 25: alternateCodes = (java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes>)value$; break;
    case 26: country = (java.util.List<com.maersk.Geography.smds.operations.MSK.country>)value$; break;
    case 27: parent = (java.util.List<com.maersk.Geography.smds.operations.MSK.parent>)value$; break;
    case 28: subCityParent = (java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent>)value$; break;
    case 29: bda = (java.util.List<com.maersk.Geography.smds.operations.MSK.bda>)value$; break;
    case 30: bdaLocations = (java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'geoType' field.
   * @return The value of the 'geoType' field.
   */
  public java.lang.String getGeoType() {
    return geoType;
  }


  /**
   * Sets the value of the 'geoType' field.
   * @param value the value to set.
   */
  public void setGeoType(java.lang.String value) {
    this.geoType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return The value of the 'validFrom' field.
   */
  public long getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * @param value the value to set.
   */
  public void setValidFrom(long value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return The value of the 'validTo' field.
   */
  public long getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * @param value the value to set.
   */
  public void setValidTo(long value) {
    this.validTo = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.String getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.String value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.String getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.String value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'timeZone' field.
   * @return The value of the 'timeZone' field.
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }


  /**
   * Sets the value of the 'timeZone' field.
   * @param value the value to set.
   */
  public void setTimeZone(java.lang.String value) {
    this.timeZone = value;
  }

  /**
   * Gets the value of the 'daylightSavingTime' field.
   * @return The value of the 'daylightSavingTime' field.
   */
  public java.lang.String getDaylightSavingTime() {
    return daylightSavingTime;
  }


  /**
   * Sets the value of the 'daylightSavingTime' field.
   * @param value the value to set.
   */
  public void setDaylightSavingTime(java.lang.String value) {
    this.daylightSavingTime = value;
  }

  /**
   * Gets the value of the 'utcOffsetMinutes' field.
   * @return The value of the 'utcOffsetMinutes' field.
   */
  public java.lang.String getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }


  /**
   * Sets the value of the 'utcOffsetMinutes' field.
   * @param value the value to set.
   */
  public void setUtcOffsetMinutes(java.lang.String value) {
    this.utcOffsetMinutes = value;
  }

  /**
   * Gets the value of the 'daylightSavingStart' field.
   * @return The value of the 'daylightSavingStart' field.
   */
  public java.lang.Long getDaylightSavingStart() {
    return daylightSavingStart;
  }


  /**
   * Sets the value of the 'daylightSavingStart' field.
   * @param value the value to set.
   */
  public void setDaylightSavingStart(java.lang.Long value) {
    this.daylightSavingStart = value;
  }

  /**
   * Gets the value of the 'daylightSavingEnd' field.
   * @return The value of the 'daylightSavingEnd' field.
   */
  public java.lang.Long getDaylightSavingEnd() {
    return daylightSavingEnd;
  }


  /**
   * Sets the value of the 'daylightSavingEnd' field.
   * @param value the value to set.
   */
  public void setDaylightSavingEnd(java.lang.Long value) {
    this.daylightSavingEnd = value;
  }

  /**
   * Gets the value of the 'daylightSavingShiftMinutes' field.
   * @return The value of the 'daylightSavingShiftMinutes' field.
   */
  public java.lang.String getDaylightSavingShiftMinutes() {
    return daylightSavingShiftMinutes;
  }


  /**
   * Sets the value of the 'daylightSavingShiftMinutes' field.
   * @param value the value to set.
   */
  public void setDaylightSavingShiftMinutes(java.lang.String value) {
    this.daylightSavingShiftMinutes = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'workaroundReason' field.
   * @return The value of the 'workaroundReason' field.
   */
  public java.lang.String getWorkaroundReason() {
    return workaroundReason;
  }


  /**
   * Sets the value of the 'workaroundReason' field.
   * @param value the value to set.
   */
  public void setWorkaroundReason(java.lang.String value) {
    this.workaroundReason = value;
  }

  /**
   * Gets the value of the 'restricted' field.
   * @return The value of the 'restricted' field.
   */
  public java.lang.String getRestricted() {
    return restricted;
  }


  /**
   * Sets the value of the 'restricted' field.
   * @param value the value to set.
   */
  public void setRestricted(java.lang.String value) {
    this.restricted = value;
  }

  /**
   * Gets the value of the 'postalCodeMandatoryFlag' field.
   * @return The value of the 'postalCodeMandatoryFlag' field.
   */
  public java.lang.String getPostalCodeMandatoryFlag() {
    return postalCodeMandatoryFlag;
  }


  /**
   * Sets the value of the 'postalCodeMandatoryFlag' field.
   * @param value the value to set.
   */
  public void setPostalCodeMandatoryFlag(java.lang.String value) {
    this.postalCodeMandatoryFlag = value;
  }

  /**
   * Gets the value of the 'stateProvienceMandatory' field.
   * @return The value of the 'stateProvienceMandatory' field.
   */
  public java.lang.String getStateProvienceMandatory() {
    return stateProvienceMandatory;
  }


  /**
   * Sets the value of the 'stateProvienceMandatory' field.
   * @param value the value to set.
   */
  public void setStateProvienceMandatory(java.lang.String value) {
    this.stateProvienceMandatory = value;
  }

  /**
   * Gets the value of the 'dialingCode' field.
   * @return The value of the 'dialingCode' field.
   */
  public java.lang.String getDialingCode() {
    return dialingCode;
  }


  /**
   * Sets the value of the 'dialingCode' field.
   * @param value the value to set.
   */
  public void setDialingCode(java.lang.String value) {
    this.dialingCode = value;
  }

  /**
   * Gets the value of the 'dialingCodedescription' field.
   * @return The value of the 'dialingCodedescription' field.
   */
  public java.lang.String getDialingCodedescription() {
    return dialingCodedescription;
  }


  /**
   * Sets the value of the 'dialingCodedescription' field.
   * @param value the value to set.
   */
  public void setDialingCodedescription(java.lang.String value) {
    this.dialingCodedescription = value;
  }

  /**
   * Gets the value of the 'portFlag' field.
   * @return The value of the 'portFlag' field.
   */
  public java.lang.String getPortFlag() {
    return portFlag;
  }


  /**
   * Sets the value of the 'portFlag' field.
   * @param value the value to set.
   */
  public void setPortFlag(java.lang.String value) {
    this.portFlag = value;
  }

  /**
   * Gets the value of the 'olsonTimezone' field.
   * @return The value of the 'olsonTimezone' field.
   */
  public java.lang.String getOlsonTimezone() {
    return olsonTimezone;
  }


  /**
   * Sets the value of the 'olsonTimezone' field.
   * @param value the value to set.
   */
  public void setOlsonTimezone(java.lang.String value) {
    this.olsonTimezone = value;
  }

  /**
   * Gets the value of the 'bdaType' field.
   * @return The value of the 'bdaType' field.
   */
  public java.lang.String getBdaType() {
    return bdaType;
  }


  /**
   * Sets the value of the 'bdaType' field.
   * @param value the value to set.
   */
  public void setBdaType(java.lang.String value) {
    this.bdaType = value;
  }

  /**
   * Gets the value of the 'hsudName' field.
   * @return The value of the 'hsudName' field.
   */
  public java.lang.String getHsudName() {
    return hsudName;
  }


  /**
   * Sets the value of the 'hsudName' field.
   * @param value the value to set.
   */
  public void setHsudName(java.lang.String value) {
    this.hsudName = value;
  }

  /**
   * Gets the value of the 'alternateNames' field.
   * @return The value of the 'alternateNames' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> getAlternateNames() {
    return alternateNames;
  }


  /**
   * Sets the value of the 'alternateNames' field.
   * @param value the value to set.
   */
  public void setAlternateNames(java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> value) {
    this.alternateNames = value;
  }

  /**
   * Gets the value of the 'alternateCodes' field.
   * @return The value of the 'alternateCodes' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> getAlternateCodes() {
    return alternateCodes;
  }


  /**
   * Sets the value of the 'alternateCodes' field.
   * @param value the value to set.
   */
  public void setAlternateCodes(java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> value) {
    this.alternateCodes = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.country> getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.util.List<com.maersk.Geography.smds.operations.MSK.country> value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'parent' field.
   * @return The value of the 'parent' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.parent> getParent() {
    return parent;
  }


  /**
   * Sets the value of the 'parent' field.
   * @param value the value to set.
   */
  public void setParent(java.util.List<com.maersk.Geography.smds.operations.MSK.parent> value) {
    this.parent = value;
  }

  /**
   * Gets the value of the 'subCityParent' field.
   * @return The value of the 'subCityParent' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> getSubCityParent() {
    return subCityParent;
  }


  /**
   * Sets the value of the 'subCityParent' field.
   * @param value the value to set.
   */
  public void setSubCityParent(java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> value) {
    this.subCityParent = value;
  }

  /**
   * Gets the value of the 'bda' field.
   * @return The value of the 'bda' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.bda> getBda() {
    return bda;
  }


  /**
   * Sets the value of the 'bda' field.
   * @param value the value to set.
   */
  public void setBda(java.util.List<com.maersk.Geography.smds.operations.MSK.bda> value) {
    this.bda = value;
  }

  /**
   * Gets the value of the 'bdaLocations' field.
   * @return The value of the 'bdaLocations' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> getBdaLocations() {
    return bdaLocations;
  }


  /**
   * Sets the value of the 'bdaLocations' field.
   * @param value the value to set.
   */
  public void setBdaLocations(java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> value) {
    this.bdaLocations = value;
  }

  /**
   * Creates a new geography RecordBuilder.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.geography.Builder newBuilder() {
    return new com.maersk.Geography.smds.operations.MSK.geography.Builder();
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.geography.Builder newBuilder(com.maersk.Geography.smds.operations.MSK.geography.Builder other) {
    if (other == null) {
      return new com.maersk.Geography.smds.operations.MSK.geography.Builder();
    } else {
      return new com.maersk.Geography.smds.operations.MSK.geography.Builder(other);
    }
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing geography instance.
   * @param other The existing instance to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.geography.Builder newBuilder(com.maersk.Geography.smds.operations.MSK.geography other) {
    if (other == null) {
      return new com.maersk.Geography.smds.operations.MSK.geography.Builder();
    } else {
      return new com.maersk.Geography.smds.operations.MSK.geography.Builder(other);
    }
  }

  /**
   * RecordBuilder for geography instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<geography>
    implements org.apache.avro.data.RecordBuilder<geography> {

    private java.lang.String geoType;
    private java.lang.String name;
    private java.lang.String status;
    private long validFrom;
    private long validTo;
    private java.lang.String longitude;
    private java.lang.String latitude;
    private java.lang.String timeZone;
    private java.lang.String daylightSavingTime;
    private java.lang.String utcOffsetMinutes;
    private java.lang.Long daylightSavingStart;
    private java.lang.Long daylightSavingEnd;
    private java.lang.String daylightSavingShiftMinutes;
    private java.lang.String description;
    private java.lang.String workaroundReason;
    private java.lang.String restricted;
    private java.lang.String postalCodeMandatoryFlag;
    private java.lang.String stateProvienceMandatory;
    private java.lang.String dialingCode;
    private java.lang.String dialingCodedescription;
    private java.lang.String portFlag;
    private java.lang.String olsonTimezone;
    private java.lang.String bdaType;
    private java.lang.String hsudName;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> alternateNames;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> alternateCodes;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.country> country;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.parent> parent;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> subCityParent;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.bda> bda;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> bdaLocations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.Geography.smds.operations.MSK.geography.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geoType)) {
        this.geoType = data().deepCopy(fields()[0].schema(), other.geoType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[3].schema(), other.validFrom);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.validTo)) {
        this.validTo = data().deepCopy(fields()[4].schema(), other.validTo);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[7].schema(), other.timeZone);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[8].schema(), other.daylightSavingTime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[9].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[10].schema(), other.daylightSavingStart);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[11].schema(), other.daylightSavingEnd);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[12].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.description)) {
        this.description = data().deepCopy(fields()[13].schema(), other.description);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[14].schema(), other.workaroundReason);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.restricted)) {
        this.restricted = data().deepCopy(fields()[15].schema(), other.restricted);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.postalCodeMandatoryFlag)) {
        this.postalCodeMandatoryFlag = data().deepCopy(fields()[16].schema(), other.postalCodeMandatoryFlag);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.stateProvienceMandatory)) {
        this.stateProvienceMandatory = data().deepCopy(fields()[17].schema(), other.stateProvienceMandatory);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[18].schema(), other.dialingCode);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dialingCodedescription)) {
        this.dialingCodedescription = data().deepCopy(fields()[19].schema(), other.dialingCodedescription);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[20].schema(), other.portFlag);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[21].schema(), other.olsonTimezone);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[22].schema(), other.bdaType);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[23].schema(), other.hsudName);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[24].schema(), other.alternateNames);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[25].schema(), other.alternateCodes);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.country)) {
        this.country = data().deepCopy(fields()[26].schema(), other.country);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.parent)) {
        this.parent = data().deepCopy(fields()[27].schema(), other.parent);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.subCityParent)) {
        this.subCityParent = data().deepCopy(fields()[28].schema(), other.subCityParent);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.bda)) {
        this.bda = data().deepCopy(fields()[29].schema(), other.bda);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[30].schema(), other.bdaLocations);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
    }

    /**
     * Creates a Builder by copying an existing geography instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.Geography.smds.operations.MSK.geography other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.geoType)) {
        this.geoType = data().deepCopy(fields()[0].schema(), other.geoType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[3].schema(), other.validFrom);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validTo)) {
        this.validTo = data().deepCopy(fields()[4].schema(), other.validTo);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[7].schema(), other.timeZone);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[8].schema(), other.daylightSavingTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[9].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[10].schema(), other.daylightSavingStart);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[11].schema(), other.daylightSavingEnd);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[12].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.description)) {
        this.description = data().deepCopy(fields()[13].schema(), other.description);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[14].schema(), other.workaroundReason);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.restricted)) {
        this.restricted = data().deepCopy(fields()[15].schema(), other.restricted);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.postalCodeMandatoryFlag)) {
        this.postalCodeMandatoryFlag = data().deepCopy(fields()[16].schema(), other.postalCodeMandatoryFlag);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.stateProvienceMandatory)) {
        this.stateProvienceMandatory = data().deepCopy(fields()[17].schema(), other.stateProvienceMandatory);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[18].schema(), other.dialingCode);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dialingCodedescription)) {
        this.dialingCodedescription = data().deepCopy(fields()[19].schema(), other.dialingCodedescription);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[20].schema(), other.portFlag);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[21].schema(), other.olsonTimezone);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[22].schema(), other.bdaType);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[23].schema(), other.hsudName);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[24].schema(), other.alternateNames);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[25].schema(), other.alternateCodes);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.country)) {
        this.country = data().deepCopy(fields()[26].schema(), other.country);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.parent)) {
        this.parent = data().deepCopy(fields()[27].schema(), other.parent);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.subCityParent)) {
        this.subCityParent = data().deepCopy(fields()[28].schema(), other.subCityParent);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.bda)) {
        this.bda = data().deepCopy(fields()[29].schema(), other.bda);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[30].schema(), other.bdaLocations);
        fieldSetFlags()[30] = true;
      }
    }

    /**
      * Gets the value of the 'geoType' field.
      * @return The value.
      */
    public java.lang.String getGeoType() {
      return geoType;
    }


    /**
      * Sets the value of the 'geoType' field.
      * @param value The value of 'geoType'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setGeoType(java.lang.String value) {
      validate(fields()[0], value);
      this.geoType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'geoType' field has been set.
      * @return True if the 'geoType' field has been set, false otherwise.
      */
    public boolean hasGeoType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'geoType' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearGeoType() {
      geoType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setStatus(java.lang.String value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * @return The value.
      */
    public long getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setValidFrom(long value) {
      validate(fields()[3], value);
      this.validFrom = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearValidFrom() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * @return The value.
      */
    public long getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setValidTo(long value) {
      validate(fields()[4], value);
      this.validTo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validTo' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearValidTo() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.String getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setLongitude(java.lang.String value) {
      validate(fields()[5], value);
      this.longitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.String getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setLatitude(java.lang.String value) {
      validate(fields()[6], value);
      this.latitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeZone' field.
      * @return The value.
      */
    public java.lang.String getTimeZone() {
      return timeZone;
    }


    /**
      * Sets the value of the 'timeZone' field.
      * @param value The value of 'timeZone'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setTimeZone(java.lang.String value) {
      validate(fields()[7], value);
      this.timeZone = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timeZone' field has been set.
      * @return True if the 'timeZone' field has been set, false otherwise.
      */
    public boolean hasTimeZone() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timeZone' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearTimeZone() {
      timeZone = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingTime' field.
      * @return The value.
      */
    public java.lang.String getDaylightSavingTime() {
      return daylightSavingTime;
    }


    /**
      * Sets the value of the 'daylightSavingTime' field.
      * @param value The value of 'daylightSavingTime'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDaylightSavingTime(java.lang.String value) {
      validate(fields()[8], value);
      this.daylightSavingTime = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingTime' field has been set.
      * @return True if the 'daylightSavingTime' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'daylightSavingTime' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDaylightSavingTime() {
      daylightSavingTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'utcOffsetMinutes' field.
      * @return The value.
      */
    public java.lang.String getUtcOffsetMinutes() {
      return utcOffsetMinutes;
    }


    /**
      * Sets the value of the 'utcOffsetMinutes' field.
      * @param value The value of 'utcOffsetMinutes'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setUtcOffsetMinutes(java.lang.String value) {
      validate(fields()[9], value);
      this.utcOffsetMinutes = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'utcOffsetMinutes' field has been set.
      * @return True if the 'utcOffsetMinutes' field has been set, false otherwise.
      */
    public boolean hasUtcOffsetMinutes() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'utcOffsetMinutes' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearUtcOffsetMinutes() {
      utcOffsetMinutes = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingStart' field.
      * @return The value.
      */
    public java.lang.Long getDaylightSavingStart() {
      return daylightSavingStart;
    }


    /**
      * Sets the value of the 'daylightSavingStart' field.
      * @param value The value of 'daylightSavingStart'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDaylightSavingStart(java.lang.Long value) {
      validate(fields()[10], value);
      this.daylightSavingStart = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingStart' field has been set.
      * @return True if the 'daylightSavingStart' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingStart() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'daylightSavingStart' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDaylightSavingStart() {
      daylightSavingStart = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingEnd' field.
      * @return The value.
      */
    public java.lang.Long getDaylightSavingEnd() {
      return daylightSavingEnd;
    }


    /**
      * Sets the value of the 'daylightSavingEnd' field.
      * @param value The value of 'daylightSavingEnd'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDaylightSavingEnd(java.lang.Long value) {
      validate(fields()[11], value);
      this.daylightSavingEnd = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingEnd' field has been set.
      * @return True if the 'daylightSavingEnd' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingEnd() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'daylightSavingEnd' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDaylightSavingEnd() {
      daylightSavingEnd = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingShiftMinutes' field.
      * @return The value.
      */
    public java.lang.String getDaylightSavingShiftMinutes() {
      return daylightSavingShiftMinutes;
    }


    /**
      * Sets the value of the 'daylightSavingShiftMinutes' field.
      * @param value The value of 'daylightSavingShiftMinutes'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDaylightSavingShiftMinutes(java.lang.String value) {
      validate(fields()[12], value);
      this.daylightSavingShiftMinutes = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingShiftMinutes' field has been set.
      * @return True if the 'daylightSavingShiftMinutes' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingShiftMinutes() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'daylightSavingShiftMinutes' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDaylightSavingShiftMinutes() {
      daylightSavingShiftMinutes = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDescription(java.lang.String value) {
      validate(fields()[13], value);
      this.description = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDescription() {
      description = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'workaroundReason' field.
      * @return The value.
      */
    public java.lang.String getWorkaroundReason() {
      return workaroundReason;
    }


    /**
      * Sets the value of the 'workaroundReason' field.
      * @param value The value of 'workaroundReason'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setWorkaroundReason(java.lang.String value) {
      validate(fields()[14], value);
      this.workaroundReason = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'workaroundReason' field has been set.
      * @return True if the 'workaroundReason' field has been set, false otherwise.
      */
    public boolean hasWorkaroundReason() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'workaroundReason' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearWorkaroundReason() {
      workaroundReason = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'restricted' field.
      * @return The value.
      */
    public java.lang.String getRestricted() {
      return restricted;
    }


    /**
      * Sets the value of the 'restricted' field.
      * @param value The value of 'restricted'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setRestricted(java.lang.String value) {
      validate(fields()[15], value);
      this.restricted = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'restricted' field has been set.
      * @return True if the 'restricted' field has been set, false otherwise.
      */
    public boolean hasRestricted() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'restricted' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearRestricted() {
      restricted = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCodeMandatoryFlag' field.
      * @return The value.
      */
    public java.lang.String getPostalCodeMandatoryFlag() {
      return postalCodeMandatoryFlag;
    }


    /**
      * Sets the value of the 'postalCodeMandatoryFlag' field.
      * @param value The value of 'postalCodeMandatoryFlag'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setPostalCodeMandatoryFlag(java.lang.String value) {
      validate(fields()[16], value);
      this.postalCodeMandatoryFlag = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCodeMandatoryFlag' field has been set.
      * @return True if the 'postalCodeMandatoryFlag' field has been set, false otherwise.
      */
    public boolean hasPostalCodeMandatoryFlag() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'postalCodeMandatoryFlag' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearPostalCodeMandatoryFlag() {
      postalCodeMandatoryFlag = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateProvienceMandatory' field.
      * @return The value.
      */
    public java.lang.String getStateProvienceMandatory() {
      return stateProvienceMandatory;
    }


    /**
      * Sets the value of the 'stateProvienceMandatory' field.
      * @param value The value of 'stateProvienceMandatory'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setStateProvienceMandatory(java.lang.String value) {
      validate(fields()[17], value);
      this.stateProvienceMandatory = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'stateProvienceMandatory' field has been set.
      * @return True if the 'stateProvienceMandatory' field has been set, false otherwise.
      */
    public boolean hasStateProvienceMandatory() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'stateProvienceMandatory' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearStateProvienceMandatory() {
      stateProvienceMandatory = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCode' field.
      * @return The value.
      */
    public java.lang.String getDialingCode() {
      return dialingCode;
    }


    /**
      * Sets the value of the 'dialingCode' field.
      * @param value The value of 'dialingCode'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDialingCode(java.lang.String value) {
      validate(fields()[18], value);
      this.dialingCode = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCode' field has been set.
      * @return True if the 'dialingCode' field has been set, false otherwise.
      */
    public boolean hasDialingCode() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'dialingCode' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDialingCode() {
      dialingCode = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCodedescription' field.
      * @return The value.
      */
    public java.lang.String getDialingCodedescription() {
      return dialingCodedescription;
    }


    /**
      * Sets the value of the 'dialingCodedescription' field.
      * @param value The value of 'dialingCodedescription'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setDialingCodedescription(java.lang.String value) {
      validate(fields()[19], value);
      this.dialingCodedescription = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCodedescription' field has been set.
      * @return True if the 'dialingCodedescription' field has been set, false otherwise.
      */
    public boolean hasDialingCodedescription() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'dialingCodedescription' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearDialingCodedescription() {
      dialingCodedescription = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'portFlag' field.
      * @return The value.
      */
    public java.lang.String getPortFlag() {
      return portFlag;
    }


    /**
      * Sets the value of the 'portFlag' field.
      * @param value The value of 'portFlag'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setPortFlag(java.lang.String value) {
      validate(fields()[20], value);
      this.portFlag = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'portFlag' field has been set.
      * @return True if the 'portFlag' field has been set, false otherwise.
      */
    public boolean hasPortFlag() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'portFlag' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearPortFlag() {
      portFlag = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'olsonTimezone' field.
      * @return The value.
      */
    public java.lang.String getOlsonTimezone() {
      return olsonTimezone;
    }


    /**
      * Sets the value of the 'olsonTimezone' field.
      * @param value The value of 'olsonTimezone'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setOlsonTimezone(java.lang.String value) {
      validate(fields()[21], value);
      this.olsonTimezone = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'olsonTimezone' field has been set.
      * @return True if the 'olsonTimezone' field has been set, false otherwise.
      */
    public boolean hasOlsonTimezone() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'olsonTimezone' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearOlsonTimezone() {
      olsonTimezone = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaType' field.
      * @return The value.
      */
    public java.lang.String getBdaType() {
      return bdaType;
    }


    /**
      * Sets the value of the 'bdaType' field.
      * @param value The value of 'bdaType'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setBdaType(java.lang.String value) {
      validate(fields()[22], value);
      this.bdaType = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaType' field has been set.
      * @return True if the 'bdaType' field has been set, false otherwise.
      */
    public boolean hasBdaType() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'bdaType' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearBdaType() {
      bdaType = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsudName' field.
      * @return The value.
      */
    public java.lang.String getHsudName() {
      return hsudName;
    }


    /**
      * Sets the value of the 'hsudName' field.
      * @param value The value of 'hsudName'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setHsudName(java.lang.String value) {
      validate(fields()[23], value);
      this.hsudName = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'hsudName' field has been set.
      * @return True if the 'hsudName' field has been set, false otherwise.
      */
    public boolean hasHsudName() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'hsudName' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearHsudName() {
      hsudName = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateNames' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> getAlternateNames() {
      return alternateNames;
    }


    /**
      * Sets the value of the 'alternateNames' field.
      * @param value The value of 'alternateNames'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setAlternateNames(java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> value) {
      validate(fields()[24], value);
      this.alternateNames = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateNames' field has been set.
      * @return True if the 'alternateNames' field has been set, false otherwise.
      */
    public boolean hasAlternateNames() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'alternateNames' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearAlternateNames() {
      alternateNames = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateCodes' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> getAlternateCodes() {
      return alternateCodes;
    }


    /**
      * Sets the value of the 'alternateCodes' field.
      * @param value The value of 'alternateCodes'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setAlternateCodes(java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> value) {
      validate(fields()[25], value);
      this.alternateCodes = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateCodes' field has been set.
      * @return True if the 'alternateCodes' field has been set, false otherwise.
      */
    public boolean hasAlternateCodes() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'alternateCodes' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearAlternateCodes() {
      alternateCodes = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.country> getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setCountry(java.util.List<com.maersk.Geography.smds.operations.MSK.country> value) {
      validate(fields()[26], value);
      this.country = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearCountry() {
      country = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'parent' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.parent> getParent() {
      return parent;
    }


    /**
      * Sets the value of the 'parent' field.
      * @param value The value of 'parent'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setParent(java.util.List<com.maersk.Geography.smds.operations.MSK.parent> value) {
      validate(fields()[27], value);
      this.parent = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'parent' field has been set.
      * @return True if the 'parent' field has been set, false otherwise.
      */
    public boolean hasParent() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'parent' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearParent() {
      parent = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCityParent' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> getSubCityParent() {
      return subCityParent;
    }


    /**
      * Sets the value of the 'subCityParent' field.
      * @param value The value of 'subCityParent'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setSubCityParent(java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> value) {
      validate(fields()[28], value);
      this.subCityParent = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'subCityParent' field has been set.
      * @return True if the 'subCityParent' field has been set, false otherwise.
      */
    public boolean hasSubCityParent() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'subCityParent' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearSubCityParent() {
      subCityParent = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'bda' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.bda> getBda() {
      return bda;
    }


    /**
      * Sets the value of the 'bda' field.
      * @param value The value of 'bda'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setBda(java.util.List<com.maersk.Geography.smds.operations.MSK.bda> value) {
      validate(fields()[29], value);
      this.bda = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'bda' field has been set.
      * @return True if the 'bda' field has been set, false otherwise.
      */
    public boolean hasBda() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'bda' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearBda() {
      bda = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaLocations' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> getBdaLocations() {
      return bdaLocations;
    }


    /**
      * Sets the value of the 'bdaLocations' field.
      * @param value The value of 'bdaLocations'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder setBdaLocations(java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> value) {
      validate(fields()[30], value);
      this.bdaLocations = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaLocations' field has been set.
      * @return True if the 'bdaLocations' field has been set, false otherwise.
      */
    public boolean hasBdaLocations() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'bdaLocations' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.geography.Builder clearBdaLocations() {
      bdaLocations = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public geography build() {
      try {
        geography record = new geography();
        record.geoType = fieldSetFlags()[0] ? this.geoType : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.String) defaultValue(fields()[2]);
        record.validFrom = fieldSetFlags()[3] ? this.validFrom : (java.lang.Long) defaultValue(fields()[3]);
        record.validTo = fieldSetFlags()[4] ? this.validTo : (java.lang.Long) defaultValue(fields()[4]);
        record.longitude = fieldSetFlags()[5] ? this.longitude : (java.lang.String) defaultValue(fields()[5]);
        record.latitude = fieldSetFlags()[6] ? this.latitude : (java.lang.String) defaultValue(fields()[6]);
        record.timeZone = fieldSetFlags()[7] ? this.timeZone : (java.lang.String) defaultValue(fields()[7]);
        record.daylightSavingTime = fieldSetFlags()[8] ? this.daylightSavingTime : (java.lang.String) defaultValue(fields()[8]);
        record.utcOffsetMinutes = fieldSetFlags()[9] ? this.utcOffsetMinutes : (java.lang.String) defaultValue(fields()[9]);
        record.daylightSavingStart = fieldSetFlags()[10] ? this.daylightSavingStart : (java.lang.Long) defaultValue(fields()[10]);
        record.daylightSavingEnd = fieldSetFlags()[11] ? this.daylightSavingEnd : (java.lang.Long) defaultValue(fields()[11]);
        record.daylightSavingShiftMinutes = fieldSetFlags()[12] ? this.daylightSavingShiftMinutes : (java.lang.String) defaultValue(fields()[12]);
        record.description = fieldSetFlags()[13] ? this.description : (java.lang.String) defaultValue(fields()[13]);
        record.workaroundReason = fieldSetFlags()[14] ? this.workaroundReason : (java.lang.String) defaultValue(fields()[14]);
        record.restricted = fieldSetFlags()[15] ? this.restricted : (java.lang.String) defaultValue(fields()[15]);
        record.postalCodeMandatoryFlag = fieldSetFlags()[16] ? this.postalCodeMandatoryFlag : (java.lang.String) defaultValue(fields()[16]);
        record.stateProvienceMandatory = fieldSetFlags()[17] ? this.stateProvienceMandatory : (java.lang.String) defaultValue(fields()[17]);
        record.dialingCode = fieldSetFlags()[18] ? this.dialingCode : (java.lang.String) defaultValue(fields()[18]);
        record.dialingCodedescription = fieldSetFlags()[19] ? this.dialingCodedescription : (java.lang.String) defaultValue(fields()[19]);
        record.portFlag = fieldSetFlags()[20] ? this.portFlag : (java.lang.String) defaultValue(fields()[20]);
        record.olsonTimezone = fieldSetFlags()[21] ? this.olsonTimezone : (java.lang.String) defaultValue(fields()[21]);
        record.bdaType = fieldSetFlags()[22] ? this.bdaType : (java.lang.String) defaultValue(fields()[22]);
        record.hsudName = fieldSetFlags()[23] ? this.hsudName : (java.lang.String) defaultValue(fields()[23]);
        record.alternateNames = fieldSetFlags()[24] ? this.alternateNames : (java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames>) defaultValue(fields()[24]);
        record.alternateCodes = fieldSetFlags()[25] ? this.alternateCodes : (java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes>) defaultValue(fields()[25]);
        record.country = fieldSetFlags()[26] ? this.country : (java.util.List<com.maersk.Geography.smds.operations.MSK.country>) defaultValue(fields()[26]);
        record.parent = fieldSetFlags()[27] ? this.parent : (java.util.List<com.maersk.Geography.smds.operations.MSK.parent>) defaultValue(fields()[27]);
        record.subCityParent = fieldSetFlags()[28] ? this.subCityParent : (java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent>) defaultValue(fields()[28]);
        record.bda = fieldSetFlags()[29] ? this.bda : (java.util.List<com.maersk.Geography.smds.operations.MSK.bda>) defaultValue(fields()[29]);
        record.bdaLocations = fieldSetFlags()[30] ? this.bdaLocations : (java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation>) defaultValue(fields()[30]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<geography>
    WRITER$ = (org.apache.avro.io.DatumWriter<geography>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<geography>
    READER$ = (org.apache.avro.io.DatumReader<geography>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.geoType);

    out.writeString(this.name);

    out.writeString(this.status);

    out.writeLong(this.validFrom);

    out.writeLong(this.validTo);

    if (this.longitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.longitude);
    }

    if (this.latitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.latitude);
    }

    if (this.timeZone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timeZone);
    }

    if (this.daylightSavingTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.daylightSavingTime);
    }

    if (this.utcOffsetMinutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.utcOffsetMinutes);
    }

    if (this.daylightSavingStart == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.daylightSavingStart);
    }

    if (this.daylightSavingEnd == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.daylightSavingEnd);
    }

    if (this.daylightSavingShiftMinutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.daylightSavingShiftMinutes);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.workaroundReason == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.workaroundReason);
    }

    if (this.restricted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.restricted);
    }

    if (this.postalCodeMandatoryFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.postalCodeMandatoryFlag);
    }

    if (this.stateProvienceMandatory == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.stateProvienceMandatory);
    }

    if (this.dialingCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dialingCode);
    }

    if (this.dialingCodedescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dialingCodedescription);
    }

    if (this.portFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.portFlag);
    }

    if (this.olsonTimezone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.olsonTimezone);
    }

    if (this.bdaType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bdaType);
    }

    if (this.hsudName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hsudName);
    }

    if (this.alternateNames == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.alternateNames.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.maersk.Geography.smds.operations.MSK.alternateNames e0: this.alternateNames) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    long size1 = this.alternateCodes.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.maersk.Geography.smds.operations.MSK.alternateCodes e1: this.alternateCodes) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.country.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (com.maersk.Geography.smds.operations.MSK.country e2: this.country) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.parent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.parent.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (com.maersk.Geography.smds.operations.MSK.parent e3: this.parent) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.subCityParent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.subCityParent.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (com.maersk.Geography.smds.operations.MSK.subCityParent e4: this.subCityParent) {
        actualSize4++;
        out.startItem();
        e4.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.bda == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.bda.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (com.maersk.Geography.smds.operations.MSK.bda e5: this.bda) {
        actualSize5++;
        out.startItem();
        e5.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    if (this.bdaLocations == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size6 = this.bdaLocations.size();
      out.writeArrayStart();
      out.setItemCount(size6);
      long actualSize6 = 0;
      for (com.maersk.Geography.smds.operations.MSK.bdaLocation e6: this.bdaLocations) {
        actualSize6++;
        out.startItem();
        e6.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize6 != size6)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.geoType = in.readString();

      this.name = in.readString();

      this.status = in.readString();

      this.validFrom = in.readLong();

      this.validTo = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.longitude = null;
      } else {
        this.longitude = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.latitude = null;
      } else {
        this.latitude = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timeZone = null;
      } else {
        this.timeZone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingTime = null;
      } else {
        this.daylightSavingTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.utcOffsetMinutes = null;
      } else {
        this.utcOffsetMinutes = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingStart = null;
      } else {
        this.daylightSavingStart = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingEnd = null;
      } else {
        this.daylightSavingEnd = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingShiftMinutes = null;
      } else {
        this.daylightSavingShiftMinutes = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.workaroundReason = null;
      } else {
        this.workaroundReason = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.restricted = null;
      } else {
        this.restricted = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.postalCodeMandatoryFlag = null;
      } else {
        this.postalCodeMandatoryFlag = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.stateProvienceMandatory = null;
      } else {
        this.stateProvienceMandatory = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dialingCode = null;
      } else {
        this.dialingCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dialingCodedescription = null;
      } else {
        this.dialingCodedescription = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.portFlag = null;
      } else {
        this.portFlag = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.olsonTimezone = null;
      } else {
        this.olsonTimezone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bdaType = null;
      } else {
        this.bdaType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hsudName = null;
      } else {
        this.hsudName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.alternateNames = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> a0 = this.alternateNames;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames>((int)size0, SCHEMA$.getField("alternateNames").schema().getTypes().get(1));
          this.alternateNames = a0;
        } else a0.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.maersk.Geography.smds.operations.MSK.alternateNames e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.maersk.Geography.smds.operations.MSK.alternateNames();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> a1 = this.alternateCodes;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes>((int)size1, SCHEMA$.getField("alternateCodes").schema());
        this.alternateCodes = a1;
      } else a1.clear();
      SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.maersk.Geography.smds.operations.MSK.alternateCodes e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.maersk.Geography.smds.operations.MSK.alternateCodes();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.country> a2 = this.country;
        if (a2 == null) {
          a2 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country>((int)size2, SCHEMA$.getField("country").schema().getTypes().get(1));
          this.country = a2;
        } else a2.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            com.maersk.Geography.smds.operations.MSK.country e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new com.maersk.Geography.smds.operations.MSK.country();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.parent = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.parent> a3 = this.parent;
        if (a3 == null) {
          a3 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent>((int)size3, SCHEMA$.getField("parent").schema().getTypes().get(1));
          this.parent = a3;
        } else a3.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            com.maersk.Geography.smds.operations.MSK.parent e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new com.maersk.Geography.smds.operations.MSK.parent();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subCityParent = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> a4 = this.subCityParent;
        if (a4 == null) {
          a4 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent>((int)size4, SCHEMA$.getField("subCityParent").schema().getTypes().get(1));
          this.subCityParent = a4;
        } else a4.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            com.maersk.Geography.smds.operations.MSK.subCityParent e4 = (ga4 != null ? ga4.peek() : null);
            if (e4 == null) {
              e4 = new com.maersk.Geography.smds.operations.MSK.subCityParent();
            }
            e4.customDecode(in);
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bda = null;
      } else {
        long size5 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.bda> a5 = this.bda;
        if (a5 == null) {
          a5 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda>((int)size5, SCHEMA$.getField("bda").schema().getTypes().get(1));
          this.bda = a5;
        } else a5.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda>)a5 : null);
        for ( ; 0 < size5; size5 = in.arrayNext()) {
          for ( ; size5 != 0; size5--) {
            com.maersk.Geography.smds.operations.MSK.bda e5 = (ga5 != null ? ga5.peek() : null);
            if (e5 == null) {
              e5 = new com.maersk.Geography.smds.operations.MSK.bda();
            }
            e5.customDecode(in);
            a5.add(e5);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bdaLocations = null;
      } else {
        long size6 = in.readArrayStart();
        java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> a6 = this.bdaLocations;
        if (a6 == null) {
          a6 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation>((int)size6, SCHEMA$.getField("bdaLocations").schema().getTypes().get(1));
          this.bdaLocations = a6;
        } else a6.clear();
        SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation>)a6 : null);
        for ( ; 0 < size6; size6 = in.arrayNext()) {
          for ( ; size6 != 0; size6--) {
            com.maersk.Geography.smds.operations.MSK.bdaLocation e6 = (ga6 != null ? ga6.peek() : null);
            if (e6 == null) {
              e6 = new com.maersk.Geography.smds.operations.MSK.bdaLocation();
            }
            e6.customDecode(in);
            a6.add(e6);
          }
        }
      }

    } else {
      for (int i = 0; i < 31; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.geoType = in.readString();
          break;

        case 1:
          this.name = in.readString();
          break;

        case 2:
          this.status = in.readString();
          break;

        case 3:
          this.validFrom = in.readLong();
          break;

        case 4:
          this.validTo = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longitude = null;
          } else {
            this.longitude = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.latitude = null;
          } else {
            this.latitude = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timeZone = null;
          } else {
            this.timeZone = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingTime = null;
          } else {
            this.daylightSavingTime = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.utcOffsetMinutes = null;
          } else {
            this.utcOffsetMinutes = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingStart = null;
          } else {
            this.daylightSavingStart = in.readLong();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingEnd = null;
          } else {
            this.daylightSavingEnd = in.readLong();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingShiftMinutes = null;
          } else {
            this.daylightSavingShiftMinutes = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.workaroundReason = null;
          } else {
            this.workaroundReason = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.restricted = null;
          } else {
            this.restricted = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.postalCodeMandatoryFlag = null;
          } else {
            this.postalCodeMandatoryFlag = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stateProvienceMandatory = null;
          } else {
            this.stateProvienceMandatory = in.readString();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dialingCode = null;
          } else {
            this.dialingCode = in.readString();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dialingCodedescription = null;
          } else {
            this.dialingCodedescription = in.readString();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.portFlag = null;
          } else {
            this.portFlag = in.readString();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.olsonTimezone = null;
          } else {
            this.olsonTimezone = in.readString();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bdaType = null;
          } else {
            this.bdaType = in.readString();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hsudName = null;
          } else {
            this.hsudName = in.readString();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.alternateNames = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.alternateNames> a0 = this.alternateNames;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames>((int)size0, SCHEMA$.getField("alternateNames").schema().getTypes().get(1));
              this.alternateNames = a0;
            } else a0.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateNames>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.maersk.Geography.smds.operations.MSK.alternateNames e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.maersk.Geography.smds.operations.MSK.alternateNames();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 25:
          long size1 = in.readArrayStart();
          java.util.List<com.maersk.Geography.smds.operations.MSK.alternateCodes> a1 = this.alternateCodes;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes>((int)size1, SCHEMA$.getField("alternateCodes").schema());
            this.alternateCodes = a1;
          } else a1.clear();
          SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.alternateCodes>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.maersk.Geography.smds.operations.MSK.alternateCodes e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.maersk.Geography.smds.operations.MSK.alternateCodes();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.country> a2 = this.country;
            if (a2 == null) {
              a2 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country>((int)size2, SCHEMA$.getField("country").schema().getTypes().get(1));
              this.country = a2;
            } else a2.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.country>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                com.maersk.Geography.smds.operations.MSK.country e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new com.maersk.Geography.smds.operations.MSK.country();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.parent = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.parent> a3 = this.parent;
            if (a3 == null) {
              a3 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent>((int)size3, SCHEMA$.getField("parent").schema().getTypes().get(1));
              this.parent = a3;
            } else a3.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.parent>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                com.maersk.Geography.smds.operations.MSK.parent e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new com.maersk.Geography.smds.operations.MSK.parent();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subCityParent = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.subCityParent> a4 = this.subCityParent;
            if (a4 == null) {
              a4 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent>((int)size4, SCHEMA$.getField("subCityParent").schema().getTypes().get(1));
              this.subCityParent = a4;
            } else a4.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.subCityParent>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                com.maersk.Geography.smds.operations.MSK.subCityParent e4 = (ga4 != null ? ga4.peek() : null);
                if (e4 == null) {
                  e4 = new com.maersk.Geography.smds.operations.MSK.subCityParent();
                }
                e4.customDecode(in);
                a4.add(e4);
              }
            }
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bda = null;
          } else {
            long size5 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.bda> a5 = this.bda;
            if (a5 == null) {
              a5 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda>((int)size5, SCHEMA$.getField("bda").schema().getTypes().get(1));
              this.bda = a5;
            } else a5.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bda>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
              for ( ; size5 != 0; size5--) {
                com.maersk.Geography.smds.operations.MSK.bda e5 = (ga5 != null ? ga5.peek() : null);
                if (e5 == null) {
                  e5 = new com.maersk.Geography.smds.operations.MSK.bda();
                }
                e5.customDecode(in);
                a5.add(e5);
              }
            }
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bdaLocations = null;
          } else {
            long size6 = in.readArrayStart();
            java.util.List<com.maersk.Geography.smds.operations.MSK.bdaLocation> a6 = this.bdaLocations;
            if (a6 == null) {
              a6 = new SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation>((int)size6, SCHEMA$.getField("bdaLocations").schema().getTypes().get(1));
              this.bdaLocations = a6;
            } else a6.clear();
            SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.Geography.smds.operations.MSK.bdaLocation>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
              for ( ; size6 != 0; size6--) {
                com.maersk.Geography.smds.operations.MSK.bdaLocation e6 = (ga6 != null ? ga6.peek() : null);
                if (e6 == null) {
                  e6 = new com.maersk.Geography.smds.operations.MSK.bdaLocation();
                }
                e6.customDecode(in);
                a6.add(e6);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










