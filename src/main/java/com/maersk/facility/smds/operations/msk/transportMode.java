/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.facility.smds.operations.msk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Facility TransportModes */
@org.apache.avro.specific.AvroGenerated
public class transportMode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8429962022091697819L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"transportMode\",\"namespace\":\"com.maersk.facility.smds.operations.msk\",\"doc\":\"Facility TransportModes\",\"fields\":[{\"name\":\"modeOfTransport\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE\"},{\"name\":\"transportCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR\"},{\"name\":\"transportDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE\"},{\"name\":\"validThroughDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<transportMode> ENCODER =
      new BinaryMessageEncoder<transportMode>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<transportMode> DECODER =
      new BinaryMessageDecoder<transportMode>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<transportMode> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<transportMode> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<transportMode> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<transportMode>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this transportMode to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a transportMode from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a transportMode instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static transportMode fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE */
  private java.lang.String modeOfTransport;
  /** The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR */
  private java.lang.String transportCode;
  /** The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE */
  private java.lang.String transportDescription;
  /** The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99 */
  private java.time.LocalDate validThroughDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public transportMode() {}

  /**
   * All-args constructor.
   * @param modeOfTransport The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
   * @param transportCode The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
   * @param transportDescription The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
   * @param validThroughDate The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
   */
  public transportMode(java.lang.String modeOfTransport, java.lang.String transportCode, java.lang.String transportDescription, java.time.LocalDate validThroughDate) {
    this.modeOfTransport = modeOfTransport;
    this.transportCode = transportCode;
    this.transportDescription = transportDescription;
    this.validThroughDate = validThroughDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return modeOfTransport;
    case 1: return transportCode;
    case 2: return transportDescription;
    case 3: return validThroughDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: modeOfTransport = value$ != null ? value$.toString() : null; break;
    case 1: transportCode = value$ != null ? value$.toString() : null; break;
    case 2: transportDescription = value$ != null ? value$.toString() : null; break;
    case 3: validThroughDate = (java.time.LocalDate)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'modeOfTransport' field.
   * @return The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
   */
  public java.lang.String getModeOfTransport() {
    return modeOfTransport;
  }


  /**
   * Sets the value of the 'modeOfTransport' field.
   * The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
   * @param value the value to set.
   */
  public void setModeOfTransport(java.lang.String value) {
    this.modeOfTransport = value;
  }

  /**
   * Gets the value of the 'transportCode' field.
   * @return The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
   */
  public java.lang.String getTransportCode() {
    return transportCode;
  }


  /**
   * Sets the value of the 'transportCode' field.
   * The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
   * @param value the value to set.
   */
  public void setTransportCode(java.lang.String value) {
    this.transportCode = value;
  }

  /**
   * Gets the value of the 'transportDescription' field.
   * @return The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
   */
  public java.lang.String getTransportDescription() {
    return transportDescription;
  }


  /**
   * Sets the value of the 'transportDescription' field.
   * The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
   * @param value the value to set.
   */
  public void setTransportDescription(java.lang.String value) {
    this.transportDescription = value;
  }

  /**
   * Gets the value of the 'validThroughDate' field.
   * @return The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
   */
  public java.time.LocalDate getValidThroughDate() {
    return validThroughDate;
  }


  /**
   * Sets the value of the 'validThroughDate' field.
   * The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
   * @param value the value to set.
   */
  public void setValidThroughDate(java.time.LocalDate value) {
    this.validThroughDate = value;
  }

  /**
   * Creates a new transportMode RecordBuilder.
   * @return A new transportMode RecordBuilder
   */
  public static com.maersk.facility.smds.operations.msk.transportMode.Builder newBuilder() {
    return new com.maersk.facility.smds.operations.msk.transportMode.Builder();
  }

  /**
   * Creates a new transportMode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new transportMode RecordBuilder
   */
  public static com.maersk.facility.smds.operations.msk.transportMode.Builder newBuilder(com.maersk.facility.smds.operations.msk.transportMode.Builder other) {
    if (other == null) {
      return new com.maersk.facility.smds.operations.msk.transportMode.Builder();
    } else {
      return new com.maersk.facility.smds.operations.msk.transportMode.Builder(other);
    }
  }

  /**
   * Creates a new transportMode RecordBuilder by copying an existing transportMode instance.
   * @param other The existing instance to copy.
   * @return A new transportMode RecordBuilder
   */
  public static com.maersk.facility.smds.operations.msk.transportMode.Builder newBuilder(com.maersk.facility.smds.operations.msk.transportMode other) {
    if (other == null) {
      return new com.maersk.facility.smds.operations.msk.transportMode.Builder();
    } else {
      return new com.maersk.facility.smds.operations.msk.transportMode.Builder(other);
    }
  }

  /**
   * RecordBuilder for transportMode instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<transportMode>
    implements org.apache.avro.data.RecordBuilder<transportMode> {

    /** The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE */
    private java.lang.String modeOfTransport;
    /** The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR */
    private java.lang.String transportCode;
    /** The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE */
    private java.lang.String transportDescription;
    /** The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99 */
    private java.time.LocalDate validThroughDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.facility.smds.operations.msk.transportMode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.modeOfTransport)) {
        this.modeOfTransport = data().deepCopy(fields()[0].schema(), other.modeOfTransport);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transportCode)) {
        this.transportCode = data().deepCopy(fields()[1].schema(), other.transportCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transportDescription)) {
        this.transportDescription = data().deepCopy(fields()[2].schema(), other.transportDescription);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing transportMode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.facility.smds.operations.msk.transportMode other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.modeOfTransport)) {
        this.modeOfTransport = data().deepCopy(fields()[0].schema(), other.modeOfTransport);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transportCode)) {
        this.transportCode = data().deepCopy(fields()[1].schema(), other.transportCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transportDescription)) {
        this.transportDescription = data().deepCopy(fields()[2].schema(), other.transportDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'modeOfTransport' field.
      * The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
      * @return The value.
      */
    public java.lang.String getModeOfTransport() {
      return modeOfTransport;
    }


    /**
      * Sets the value of the 'modeOfTransport' field.
      * The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
      * @param value The value of 'modeOfTransport'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder setModeOfTransport(java.lang.String value) {
      validate(fields()[0], value);
      this.modeOfTransport = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'modeOfTransport' field has been set.
      * The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
      * @return True if the 'modeOfTransport' field has been set, false otherwise.
      */
    public boolean hasModeOfTransport() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'modeOfTransport' field.
      * The facility mode of transport information. This attribute is applicable only for operational facility. Example: BARGE
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder clearModeOfTransport() {
      modeOfTransport = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportCode' field.
      * The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
      * @return The value.
      */
    public java.lang.String getTransportCode() {
      return transportCode;
    }


    /**
      * Sets the value of the 'transportCode' field.
      * The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
      * @param value The value of 'transportCode'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder setTransportCode(java.lang.String value) {
      validate(fields()[1], value);
      this.transportCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transportCode' field has been set.
      * The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
      * @return True if the 'transportCode' field has been set, false otherwise.
      */
    public boolean hasTransportCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transportCode' field.
      * The facility transport mode code information. This attribute is applicable only for operational facility. Example: BAR
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder clearTransportCode() {
      transportCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportDescription' field.
      * The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
      * @return The value.
      */
    public java.lang.String getTransportDescription() {
      return transportDescription;
    }


    /**
      * Sets the value of the 'transportDescription' field.
      * The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
      * @param value The value of 'transportDescription'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder setTransportDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.transportDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transportDescription' field has been set.
      * The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
      * @return True if the 'transportDescription' field has been set, false otherwise.
      */
    public boolean hasTransportDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transportDescription' field.
      * The facility transport mode description information. This attribute is applicable only for operational facility. Example: BAR-BARGE
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder clearTransportDescription() {
      transportDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validThroughDate' field.
      * The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
      * @return The value.
      */
    public java.time.LocalDate getValidThroughDate() {
      return validThroughDate;
    }


    /**
      * Sets the value of the 'validThroughDate' field.
      * The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
      * @param value The value of 'validThroughDate'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder setValidThroughDate(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.validThroughDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validThroughDate' field has been set.
      * The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
      * @return True if the 'validThroughDate' field has been set, false otherwise.
      */
    public boolean hasValidThroughDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validThroughDate' field.
      * The facility transport mode valid thru date. This attribute is applicable only for operational facility. Example: 31-12-99
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.msk.transportMode.Builder clearValidThroughDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public transportMode build() {
      try {
        transportMode record = new transportMode();
        record.modeOfTransport = fieldSetFlags()[0] ? this.modeOfTransport : (java.lang.String) defaultValue(fields()[0]);
        record.transportCode = fieldSetFlags()[1] ? this.transportCode : (java.lang.String) defaultValue(fields()[1]);
        record.transportDescription = fieldSetFlags()[2] ? this.transportDescription : (java.lang.String) defaultValue(fields()[2]);
        record.validThroughDate = fieldSetFlags()[3] ? this.validThroughDate : (java.time.LocalDate) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<transportMode>
    WRITER$ = (org.apache.avro.io.DatumWriter<transportMode>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<transportMode>
    READER$ = (org.apache.avro.io.DatumReader<transportMode>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










